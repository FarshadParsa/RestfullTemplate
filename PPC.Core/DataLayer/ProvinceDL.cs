using System;
using System.Data;
//using System.Data;
using System.Collections;
using Microsoft.Data.SqlClient;

namespace AtlasCellData.ADO
{
    public class ProvinceDL : BaseDataAccessLayerClass
    {
        #region Base properties and methods(generated by  CodeGenerator) 
        #region private variables
        private System.Int16 mProvinceID;
        private System.String mProvinceCode;
        private System.String mProvinceName;
        private System.String mProvinceLatinName;
        private System.Boolean mIsActive;

        Hashtable FieldValues;
        private Transaction mTransaction;
        #endregion private variables
        #region properties
        /// <summary> 
        /// ProvinceID/// </summary>	 
        //property for field ProvinceID#
        public System.Int16 ProvinceID
        {
            get
            {
                return mProvinceID;
            }
            set
            {
                mProvinceID = value;
                upwardShouldLoad();
                try { FieldValues["ProvinceID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// ProvinceCode/// </summary>	 
        //property for field ProvinceCode#
        public System.String ProvinceCode
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mProvinceCode;
            }
            set
            {
                mProvinceCode = value;
                try { FieldValues["ProvinceCode"] = value; } catch { }
            }
        }
        /// <summary> 
        /// ProvinceName/// </summary>	 
        //property for field ProvinceName#
        public System.String ProvinceName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mProvinceName;
            }
            set
            {
                mProvinceName = value;
                try { FieldValues["ProvinceName"] = value; } catch { }
            }
        }
        /// <summary> 
        /// ProvinceLatinName/// </summary>	 
        //property for field ProvinceLatinName#
        public System.String ProvinceLatinName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mProvinceLatinName;
            }
            set
            {
                mProvinceLatinName = value;
                try { FieldValues["ProvinceLatinName"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsActive/// </summary>	 
        //property for field IsActive#
        public System.Boolean IsActive
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsActive;
            }
            set
            {
                mIsActive = value;
                try { FieldValues["IsActive"] = value; } catch { }
            }
        }
        public Transaction transaction
        {
            get
            {
                return mTransaction;
            }
            set
            {
                if (value != null)
                {
                    sqlConnection = value.sqlTransaction.Connection;
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.Transaction = value.sqlTransaction;
                }
                mTransaction = value;
            }
        }
        #endregion properties
        #region Private Methods
        internal override void upwardShouldLoad()
        {
            shouldLoad = true;
            if (Parent != null)
                Parent.upwardShouldLoad();
        }

        internal override void upwardShouldLoad(BaseDataAccessLayerClass child)
        {
        }
        #endregion
        #region public methods
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_OLD()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [Province]  where [ProvinceID] ='" + this.ProvinceID.ToString() + "'";
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["ProvinceID"] != DBNull.Value)
                    ProvinceID = (System.Int16)dt.Rows[0]["ProvinceID"];
                if (dt.Rows[0]["ProvinceCode"] != DBNull.Value)
                    ProvinceCode = (System.String)dt.Rows[0]["ProvinceCode"];
                if (dt.Rows[0]["ProvinceName"] != DBNull.Value)
                    ProvinceName = (System.String)dt.Rows[0]["ProvinceName"];
                if (dt.Rows[0]["ProvinceLatinName"] != DBNull.Value)
                    ProvinceLatinName = (System.String)dt.Rows[0]["ProvinceLatinName"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [Province] WHERE [ProvinceID]=@ProvinceID";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@ProvinceID", this.ProvinceID));
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["ProvinceID"] != DBNull.Value)
                    ProvinceID = (System.Int16)dt.Rows[0]["ProvinceID"];
                if (dt.Rows[0]["ProvinceCode"] != DBNull.Value)
                    ProvinceCode = (System.String)dt.Rows[0]["ProvinceCode"];
                if (dt.Rows[0]["ProvinceName"] != DBNull.Value)
                    ProvinceName = (System.String)dt.Rows[0]["ProvinceName"];
                if (dt.Rows[0]["ProvinceLatinName"] != DBNull.Value)
                    ProvinceLatinName = (System.String)dt.Rows[0]["ProvinceLatinName"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_OLD(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                        sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                    else
                        sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "' and ";
                else
                if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "'";
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [Province] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["ProvinceID"] != DBNull.Value)
                    ProvinceID = (System.Int16)dt.Rows[0]["ProvinceID"];
                if (dt.Rows[0]["ProvinceCode"] != DBNull.Value)
                    ProvinceCode = (System.String)dt.Rows[0]["ProvinceCode"];
                if (dt.Rows[0]["ProvinceName"] != DBNull.Value)
                    ProvinceName = (System.String)dt.Rows[0]["ProvinceName"];
                if (dt.Rows[0]["ProvinceLatinName"] != DBNull.Value)
                    ProvinceLatinName = (System.String)dt.Rows[0]["ProvinceLatinName"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                sWhereFields += "[" + fieldNames[i] + "]=@" + fieldNames[i];
                sWhereFields += (i < fieldNames.Length - 1 ? " and" : "");
            }
            sqlCommand.Parameters.Clear();
            SqlParameter param;
            for (int i = 0; i < fieldNames.Length; i++)
            {
                param = new SqlParameter();
                param.ParameterName = "@" + fieldNames[i];
                param.Value = FieldValues[fieldNames[i]];
                sqlCommand.Parameters.Add(param);
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [Province] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["ProvinceID"] != DBNull.Value)
                    ProvinceID = (System.Int16)dt.Rows[0]["ProvinceID"];
                if (dt.Rows[0]["ProvinceCode"] != DBNull.Value)
                    ProvinceCode = (System.String)dt.Rows[0]["ProvinceCode"];
                if (dt.Rows[0]["ProvinceName"] != DBNull.Value)
                    ProvinceName = (System.String)dt.Rows[0]["ProvinceName"];
                if (dt.Rows[0]["ProvinceLatinName"] != DBNull.Value)
                    ProvinceLatinName = (System.String)dt.Rows[0]["ProvinceLatinName"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_Old()
        {
            string strSQL = "";
            strSQL = "update [Province] set " +
            "[ProvinceID]=" + mProvinceID.ToString() + "," +
            "[ProvinceCode]=N'" + mProvinceCode.ToString() + "'," +
            "[ProvinceName]=N'" + mProvinceName.ToString() + "'," +
            "[ProvinceLatinName]=N'" + mProvinceLatinName.ToString() + "'," +
            "[IsActive]=" + (IsActive ? "1" : "0") + ""
            ;
            strSQL += "  where [ProvinceID] ='" + this.ProvinceID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update()
        {
            string strSQL = "";
            strSQL = "update [Province] set ProvinceID=@ProvinceID,ProvinceCode=@ProvinceCode,ProvinceName=@ProvinceName,ProvinceLatinName=@ProvinceLatinName,IsActive=@IsActive";
            strSQL += " WHERE [ProvinceID]=@ProvinceID ";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@ProvinceID", SqlDbType.SmallInt).Value = mProvinceID;
            sqlCommand.Parameters.Add("@ProvinceCode", SqlDbType.NVarChar).Value = mProvinceCode == null ? (Object)DBNull.Value : mProvinceCode;
            sqlCommand.Parameters.Add("@ProvinceName", SqlDbType.NVarChar).Value = mProvinceName == null ? (Object)DBNull.Value : mProvinceName;
            sqlCommand.Parameters.Add("@ProvinceLatinName", SqlDbType.NVarChar).Value = mProvinceLatinName == null ? (Object)DBNull.Value : mProvinceLatinName;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update(System.Int16 ProvinceID)
        {
            string strSQL = "";
            strSQL = "update [Province] set " +
            "[ProvinceID]=" + mProvinceID.ToString() + "," +
            "[ProvinceCode]=N'" + mProvinceCode.ToString() + "'," +
            "[ProvinceName]=N'" + mProvinceName.ToString() + "'," +
            "[ProvinceLatinName]=N'" + mProvinceLatinName.ToString() + "'," +
            "[IsActive]=" + (mIsActive ? "1" : "0") + ""
            ;
            strSQL += "   where [ProvinceID] ='" + this.ProvinceID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete_OLD()
        {
            string strSQL = "";
            strSQL = "delete from [Province]  where [ProvinceID] ='" + this.ProvinceID.ToString() + "'";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete()
        {
            string strSQL = "";
            strSQL = "delete from [Province] WHERE [ProvinceID]=@ProvinceID";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@ProvinceID", this.ProvinceID));
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete(params string[] fieldNames)
        {
            if (!this.getInfo(fieldNames)) return false;
            string sWhereFields = "  ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
            }
            string strSQL = "";
            strSQL = "delete from [Province] where " + sWhereFields;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void append_OLD()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [Province] ([ProvinceID],[ProvinceCode],[ProvinceName],[ProvinceLatinName],[IsActive])" +
            "values (" +
            "" + mProvinceID.ToString() + "," +
            "N'" + mProvinceCode.ToString() + "'," +
            "N'" + mProvinceName.ToString() + "'," +
            "N'" + mProvinceLatinName.ToString() + "'," +
            (IsActive ? "1" : "0") + "" +
            ")";
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void append()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [Province] ([ProvinceID],[ProvinceCode],[ProvinceName],[ProvinceLatinName],[IsActive])" +
            "values (@ProvinceID, @ProvinceCode, @ProvinceName, @ProvinceLatinName, @IsActive )";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@ProvinceID", SqlDbType.SmallInt).Value = mProvinceID;
            sqlCommand.Parameters.Add("@ProvinceCode", SqlDbType.NVarChar).Value = mProvinceCode == null ? (Object)DBNull.Value : mProvinceCode;
            sqlCommand.Parameters.Add("@ProvinceName", SqlDbType.NVarChar).Value = mProvinceName == null ? (Object)DBNull.Value : mProvinceName;
            sqlCommand.Parameters.Add("@ProvinceLatinName", SqlDbType.NVarChar).Value = mProvinceLatinName == null ? (Object)DBNull.Value : mProvinceLatinName;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        public int getOrdinal(string whereExpression, string sortExpression)
        {
            string strSQL = "";
            strSQL = "select [ProvinceID] from [Province]" +
            (whereExpression == "" ? "" : " where " + whereExpression) +
            (sortExpression == "" ? "" : " order by " + sortExpression);
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataReader = sqlCommand.ExecuteReader();
                int index = 0;
                bool found = false;
                while (sqlDataReader.Read())
                {
                    if ((System.Int16)sqlDataReader["ProvinceID"] == ProvinceID)
                    {
                        found = true;
                        break;
                    }
                    index++;
                }
                sqlDataReader.Close();
                if (transaction == null) CloseConnection();
                if (found) return index; else return -1; ;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        ///// <summary>		
        ///// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        //		/// </summary>
        //public CustomersDL[] getCustomersProvinceID()
        //{

        // return CustomersDL.getInstances(" [ProvinceID]='"+this.ProvinceID.ToString()+"'",transaction);
        //}
        //public DataTable getCustomersProvinceIDDT()
        //{if (transaction ==null) throw new Exception ("Transaction value not set to an instance of Transaction class");

        // return CustomersDL.getRecords(""," [ProvinceID]='"+this.ProvinceID.ToString()+"'","",transaction);
        //}
        ///// <summary>		
        ///// اين تابع تعداد ركوردهاي متناظر اين شي از جدول ارجاعي را  بر مي گرداند
        //		/// </summary>
        //public long getCustomersProvinceIDCount()
        //{if (transaction ==null) throw new Exception ("Transaction value not set to an instance of Transaction class");

        // return CustomersDL.count(" [ProvinceID]='"+this.ProvinceID.ToString()+"'",transaction);
        //}
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [Province] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [Province]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [Province] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [Province]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// آخرین مقدار فیلد کلید را برمی گرداند 
        /// </summary>
        public static System.Int16 GetMaxID()
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select Max(ProvinceID) from [Province] ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? (System.Int16)0 : (System.Int16)ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// آخرین مقدار فیلد کلید را پس از یک واحد افزایش برمی گرداند 
        /// </summary>
        public static System.Int16 GetMaxIDNext()
        {
            return Convert.ToInt16(ProvinceDL.GetMaxID() + 1);
        }
        /// <summary>
        /// آخرین مقدار فیلد کلید را برمی گرداند 
        /// </summary>
        public static System.Int16 GetMaxID(Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select Max(ProvinceID) from [Province] ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? (System.Int16)0 : (System.Int16)ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// آخرین مقدار فیلد کلید را پس از یک واحد افزایش برمی گرداند 
        /// </summary>
        public static System.Int16 GetMaxIDNext(Transaction transaction)
        {
            return Convert.ToInt16(ProvinceDL.GetMaxID(transaction) + 1);
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [Province] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [Province]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [Province] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [Province] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [Province]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [Province] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [Province] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [Province] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [Province] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [Province] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [Province]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [Province]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("delete from [Province]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [Province]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [Province]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("delete from [Province]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [Province]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Province");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [Province]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Province");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [Province]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [Province]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [Province]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [Province]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static ProvinceDL[] getInstances(string whereExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [Province]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Province");
                ProvinceDL[] ProvinceDLs = new ProvinceDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    ProvinceDLs[i] = new ProvinceDL();
                    if (row["ProvinceID"] != DBNull.Value)
                        ProvinceDLs[i].ProvinceID = (System.Int16)row["ProvinceID"];

                    ProvinceDLs[i].getInfo();
                    i++;
                }
                return ProvinceDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static ProvinceDL[] getInstances(string whereExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [Province]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Province");
                ProvinceDL[] ProvinceDLs = new ProvinceDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    ProvinceDLs[i] = new ProvinceDL(transaction);
                    if (row["ProvinceID"] != DBNull.Value)
                        ProvinceDLs[i].ProvinceID = (System.Int16)row["ProvinceID"];

                    ProvinceDLs[i].getInfo();
                    i++;
                }
                return ProvinceDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static ProvinceDL[] getInstances(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [Province]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                ProvinceDL[] ProvinceDLs = new ProvinceDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    ProvinceDLs[i] = new ProvinceDL();
                    if (row["ProvinceID"] != DBNull.Value)
                        ProvinceDLs[i].ProvinceID = (System.Int16)row["ProvinceID"];

                    ProvinceDLs[i].getInfo();
                    i++;
                }
                return ProvinceDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static ProvinceDL[] getInstances(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [Province]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                ProvinceDL[] ProvinceDLs = new ProvinceDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    ProvinceDLs[i] = new ProvinceDL(transaction);
                    if (row["ProvinceID"] != DBNull.Value)
                        ProvinceDLs[i].ProvinceID = (System.Int16)row["ProvinceID"];

                    ProvinceDLs[i].getInfo();
                    i++;
                }
                return ProvinceDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static ProvinceDL[] getInstances(string whereExpression, string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [Province]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                ProvinceDL[] ProvinceDLs = new ProvinceDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    ProvinceDLs[i] = new ProvinceDL();
                    if (row["ProvinceID"] != DBNull.Value)
                        ProvinceDLs[i].ProvinceID = (System.Int16)row["ProvinceID"];

                    ProvinceDLs[i].getInfo();
                    i++;
                }
                return ProvinceDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static ProvinceDL[] getInstances(string whereExpression, string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [Province]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                ProvinceDL[] ProvinceDLs = new ProvinceDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    ProvinceDLs[i] = new ProvinceDL(transaction);
                    if (row["ProvinceID"] != DBNull.Value)
                        ProvinceDLs[i].ProvinceID = (System.Int16)row["ProvinceID"];

                    ProvinceDLs[i].getInfo();
                    i++;
                }
                return ProvinceDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }

        #endregion public methods 
        #region Constructors
        public ProvinceDL()
        {

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;

        }
        public ProvinceDL(System.Int16 ProvinceID)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;
            this.ProvinceID = ProvinceID;

        }
        public ProvinceDL(Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;

            this.transaction = transaction;

        }
        public ProvinceDL(System.Int16 ProvinceID, Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;
            this.ProvinceID = ProvinceID;

            this.transaction = transaction;

        }
        internal ProvinceDL(BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;

        }
        internal ProvinceDL(System.Int16 ProvinceID, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;
            this.ProvinceID = ProvinceID;

        }
        internal ProvinceDL(Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;

            this.transaction = transaction;

        }
        internal ProvinceDL(System.Int16 ProvinceID, Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("ProvinceID", null);
            FieldValues.Add("ProvinceCode", null);
            FieldValues.Add("ProvinceName", null);
            FieldValues.Add("ProvinceLatinName", null);
            FieldValues.Add("IsActive", null);
            IsActive = false;
            this.ProvinceID = ProvinceID;

            this.transaction = transaction;

        }

        #endregion Constructors
        #endregion Base properties and methods(generated by  CodeGenerator)

    }
}

