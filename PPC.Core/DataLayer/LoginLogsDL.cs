using System;
using System.Data ;
//using System.Data.SqlClient  ;
using Microsoft.Data.SqlClient;
using System.Collections ;
using System.Linq;

namespace AtlasCellData.ADO
{
    public class LoginLogsDL : BaseDataAccessLayerClass
    {
        #region Base properties and methods(generated by  CodeGenerator) 
        #region private variables
        private System.Int32 mLoginLogsID;
        private UserDL mUser_UserID;
        private System.Int32 mStationID;
        private System.String mLoginDate;
        private System.String mLoginTime;
        private System.String mLogoutDate;
        private System.String mLogoutTime;
        private System.String mVersion;

        Hashtable FieldValues;
        private Transaction mTransaction;
        #endregion private variables
        #region properties
        /// <summary> 
        /// LoginLogsID/// </summary>	 
        //property for field LoginLogsID#
        public System.Int32 LoginLogsID
        {
            get
            {
                return mLoginLogsID;
            }
            set
            {
                mLoginLogsID = value;
            }
        }
        /// <summary> 
        /// UserID/// </summary>	 
        //property for field UserID#
        public UserDL User_UserID
        {
            get
            {

                mUser_UserID?.getInfo();
                return mUser_UserID;
            }
            set
            {
                mUser_UserID = value;

            }
        }
        /// <summary> 
        /// StationID/// </summary>	 
        //property for field StationID#
        public System.Int32 StationID
        {
            get
            {
                return mStationID;
            }
            set
            {
                mStationID = value;
            }
        }
        /// <summary> 
        /// LoginDate/// </summary>	 
        //property for field LoginDate#
        public System.String LoginDate
        {
            get
            {
                return mLoginDate;
            }
            set
            {
                mLoginDate = value;
            }
        }
        /// <summary> 
        /// LoginTime/// </summary>	 
        //property for field LoginTime#
        public System.String LoginTime
        {
            get
            {
                return mLoginTime;
            }
            set
            {
                mLoginTime = value;
            }
        }
        /// <summary> 
        /// LogoutDate/// </summary>	 
        //property for field LogoutDate#
        public System.String LogoutDate
        {
            get
            {
                return mLogoutDate;
            }
            set
            {
                mLogoutDate = value;
            }
        }
        /// <summary> 
        /// LogoutTime/// </summary>	 
        //property for field LogoutTime#
        public System.String LogoutTime
        {
            get
            {
                return mLogoutTime;
            }
            set
            {
                mLogoutTime = value;
            }
        }
        /// <summary> 
        /// Version/// </summary>	 
        //property for field Version#
        public System.String Version
        {
            get
            {
                return mVersion;
            }
            set
            {
                mVersion = value;
            }
        }
        /// <summary> 
        public Transaction transaction
        {
            get
            {
                return mTransaction;
            }
            set
            {
                if (value != null)
                {
                    sqlConnection = value.sqlTransaction.Connection;
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.Transaction = value.sqlTransaction;
                }
                mTransaction = value;
            }
        }
        #endregion properties
        #region Private Methods
        internal override void upwardShouldLoad()
        {
            shouldLoad = true;
            if (Parent != null)
                Parent.upwardShouldLoad();
        }

        internal override void upwardShouldLoad(BaseDataAccessLayerClass child)
        {
        }
        #endregion
        #region public methods
        
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_VeryOld()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [LoginLogs]  where [LoginLogsID] ='" + this.LoginLogsID.ToString() + "'";
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["LoginLogsID"] != DBNull.Value)
                    LoginLogsID = (System.Int32)dt.Rows[0]["LoginLogsID"];
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                {
                    if (this.mUser_UserID == null) this.mUser_UserID = new UserDL(transaction, this);
                    mUser_UserID.UserID = (System.Int32)dt.Rows[0]["UserID"];
                }
                else
                    mUser_UserID = null;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["LoginDate"] != DBNull.Value)
                    LoginDate = (System.String)dt.Rows[0]["LoginDate"];
                if (dt.Rows[0]["LoginTime"] != DBNull.Value)
                    LoginTime = (System.String)dt.Rows[0]["LoginTime"];
                if (dt.Rows[0]["LogoutDate"] != DBNull.Value)
                    LogoutDate = (System.String)dt.Rows[0]["LogoutDate"];
                if (dt.Rows[0]["LogoutTime"] != DBNull.Value)
                    LogoutTime = (System.String)dt.Rows[0]["LogoutTime"];
                if (dt.Rows[0]["Version"] != DBNull.Value)
                    Version = (System.String)dt.Rows[0]["Version"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_Old()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [LoginLogs] WHERE LoginLogsID=@LoginLogsID";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@LoginLogsID", this.LoginLogsID));
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["LoginLogsID"] != DBNull.Value)
                    LoginLogsID = (System.Int32)dt.Rows[0]["LoginLogsID"];
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                {
                    if (this.mUser_UserID == null) this.mUser_UserID = new UserDL(transaction, this);
                    mUser_UserID.UserID = (System.Int32)dt.Rows[0]["UserID"];
                }
                else
                    mUser_UserID = null;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["LoginDate"] != DBNull.Value)
                    LoginDate = (System.String)dt.Rows[0]["LoginDate"];
                if (dt.Rows[0]["LoginTime"] != DBNull.Value)
                    LoginTime = (System.String)dt.Rows[0]["LoginTime"];
                if (dt.Rows[0]["LogoutDate"] != DBNull.Value)
                    LogoutDate = (System.String)dt.Rows[0]["LogoutDate"];
                if (dt.Rows[0]["LogoutTime"] != DBNull.Value)
                    LogoutTime = (System.String)dt.Rows[0]["LogoutTime"];
                if (dt.Rows[0]["Version"] != DBNull.Value)
                    Version = (System.String)dt.Rows[0]["Version"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_OLD(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                        sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                    else
                        sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "' and ";
                else
                if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "'";
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [LoginLogs] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["LoginLogsID"] != DBNull.Value)
                    LoginLogsID = (System.Int32)dt.Rows[0]["LoginLogsID"];
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                {
                    if (this.mUser_UserID == null) this.mUser_UserID = new UserDL(transaction, this);
                    mUser_UserID.UserID = (System.Int32)dt.Rows[0]["UserID"];
                }
                else
                    mUser_UserID = null;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["LoginDate"] != DBNull.Value)
                    LoginDate = (System.String)dt.Rows[0]["LoginDate"];
                if (dt.Rows[0]["LoginTime"] != DBNull.Value)
                    LoginTime = (System.String)dt.Rows[0]["LoginTime"];
                if (dt.Rows[0]["LogoutDate"] != DBNull.Value)
                    LogoutDate = (System.String)dt.Rows[0]["LogoutDate"];
                if (dt.Rows[0]["LogoutTime"] != DBNull.Value)
                    LogoutTime = (System.String)dt.Rows[0]["LogoutTime"];
                if (dt.Rows[0]["Version"] != DBNull.Value)
                    Version = (System.String)dt.Rows[0]["Version"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                sWhereFields += "[" + fieldNames[i] + "]=@" + fieldNames[i];
                sWhereFields += (i < fieldNames.Length - 1 ? " and" : "");
            }
            sqlCommand.Parameters.Clear();
            SqlParameter param;
            for (int i = 0; i < fieldNames.Length; i++)
            {
                param = new SqlParameter();
                param.ParameterName = "@" + fieldNames[i];
                param.Value = FieldValues[fieldNames[i]];
                sqlCommand.Parameters.Add(param);
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [LoginLogs] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["LoginLogsID"] != DBNull.Value)
                    LoginLogsID = (System.Int32)dt.Rows[0]["LoginLogsID"];
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                {
                    if (this.mUser_UserID == null) this.mUser_UserID = new UserDL(transaction, this);
                    mUser_UserID.UserID = (System.Int32)dt.Rows[0]["UserID"];
                }
                else
                    mUser_UserID = null;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["LoginDate"] != DBNull.Value)
                    LoginDate = (System.String)dt.Rows[0]["LoginDate"];
                if (dt.Rows[0]["LoginTime"] != DBNull.Value)
                    LoginTime = (System.String)dt.Rows[0]["LoginTime"];
                if (dt.Rows[0]["LogoutDate"] != DBNull.Value)
                    LogoutDate = (System.String)dt.Rows[0]["LogoutDate"];
                if (dt.Rows[0]["LogoutTime"] != DBNull.Value)
                    LogoutTime = (System.String)dt.Rows[0]["LogoutTime"];
                if (dt.Rows[0]["Version"] != DBNull.Value)
                    Version = (System.String)dt.Rows[0]["Version"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
       
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool Update()
        {
            string strSQL = "";
            strSQL = "update [LoginLogs] set " +
            "[LoginLogsID]=N'" + mLoginLogsID.ToString() + "'," +
            "[UserID]=" + (mUser_UserID != null ? "N'" + mUser_UserID.UserID.ToString() + "'" : "null") + "," +
            "[StationID]=N'" + mStationID.ToString() + "'," +
            "[LoginDate]=N'" + mLoginDate.ToString() + "'," +
            "[LoginTime]=N'" + mLoginTime.ToString() + "'," +
            "[LogoutDate]=N'" + mLogoutDate.ToString() + "'," +
            "[LogoutTime]=N'" + mLogoutTime.ToString() + "'," +
            "[Version]=N'" + mVersion.ToString() + "'" 
            ;
            strSQL += "  where [LoginLogsID] ='" + this.LoginLogsID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_SQL()
        {
            string strSQL = "";
            strSQL = "update [LoginLogs] set LoginLogsID=@LoginLogsID,UserID=@UserID,StationID=@StationID,LoginDate=@LoginDate,LoginTime=@LoginTime,LogoutDate=@LogoutDate,LogoutTime=@LogoutTime,Version=@Version";
            strSQL += " WHERE LoginLogsID=@LoginLogsID ";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@LoginLogsID", SqlDbType.Int).Value = mLoginLogsID == null ? (Object)DBNull.Value : mLoginLogsID;
            sqlCommand.Parameters.Add(new SqlParameter("@UserID", mUser_UserID == null ? (Object)DBNull.Value : mUser_UserID.UserID));
            sqlCommand.Parameters.Add("@StationID", SqlDbType.Int).Value = mStationID == null ? (Object)DBNull.Value : mStationID;
            sqlCommand.Parameters.Add("@LoginDate", SqlDbType.NVarChar).Value = mLoginDate == null ? (Object)DBNull.Value : mLoginDate;
            sqlCommand.Parameters.Add("@LoginTime", SqlDbType.NVarChar).Value = mLoginTime == null ? (Object)DBNull.Value : mLoginTime;
            sqlCommand.Parameters.Add("@LogoutDate", SqlDbType.NVarChar).Value = mLogoutDate == null ? (Object)DBNull.Value : mLogoutDate;
            sqlCommand.Parameters.Add("@LogoutTime", SqlDbType.NVarChar).Value = mLogoutTime == null ? (Object)DBNull.Value : mLogoutTime;
            sqlCommand.Parameters.Add("@Version", SqlDbType.NVarChar).Value = mVersion == null ? (Object)DBNull.Value : mVersion;
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_SQL(System.Int32 LoginLogsID)
        {
            string strSQL = "";
            strSQL = "update [LoginLogs] set " +
            "[LoginLogsID]=N'" + mLoginLogsID.ToString() + "'," +
            "[UserID]=" + (mUser_UserID != null ? "N'" + mUser_UserID.UserID.ToString() + "'" : "null") + "," +
            "[StationID]=N'" + mStationID.ToString() + "'," +
            "[LoginDate]=N'" + mLoginDate.ToString() + "'," +
            "[LoginTime]=N'" + mLoginTime.ToString() + "'," +
            "[LogoutDate]=N'" + mLogoutDate.ToString() + "'," +
            "[LogoutTime]=N'" + mLogoutTime.ToString() + "'," +
            "[Version]=N'" + mVersion.ToString() + "'" 
            ;
            strSQL += "   where [LoginLogsID] ='" + this.LoginLogsID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete_OLD()
        {
            string strSQL = "";
            strSQL = "delete from [LoginLogs]  where [LoginLogsID] ='" + this.LoginLogsID.ToString() + "'";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete_SQL()
        {
            string strSQL = "";
            strSQL = "delete from [LoginLogs] WHERE LoginLogsID=@LoginLogsID";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@LoginLogsID", this.LoginLogsID));
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete(params string[] fieldNames)
        {
            if (!this.getInfo(fieldNames)) return false;
            string sWhereFields = "  ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
            }
            string strSQL = "";
            strSQL = "delete from [LoginLogs] where " + sWhereFields;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }

        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void Append()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [LoginLogs] ([LoginLogsID],[UserID],[StationID],[LoginDate],[LoginTime],[LogoutDate],[LogoutTime],[Version])" +
            "values (" +
            "N'" + mLoginLogsID.ToString() + "'," +
            (mUser_UserID != null ? "'" + mUser_UserID.UserID.ToString() + "'," : "null,") +
            "N'" + mStationID.ToString() + "'," +
            "N'" + mLoginDate.ToString() + "'," +
            "N'" + mLoginTime.ToString() + "'," +
            "N'" + mLogoutDate.ToString() + "'," +
            "N'" + mLogoutTime.ToString() + "'," +
            "N'" + mVersion.ToString() + "'" +
            ")";
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void append_SQL()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [LoginLogs] ([LoginLogsID],[UserID],[StationID],[LoginDate],[LoginTime],[LogoutDate],[LogoutTime],[Version])" +
            "values (@LoginLogsID, @UserID, @StationID, @LoginDate, @LoginTime, @LogoutDate, @LogoutTime, @Version )";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@LoginLogsID", SqlDbType.Int).Value = mLoginLogsID == null ? (Object)DBNull.Value : mLoginLogsID;
            sqlCommand.Parameters.Add(new SqlParameter("@UserID", mUser_UserID == null ? (Object)DBNull.Value : mUser_UserID.UserID));
            sqlCommand.Parameters.Add("@StationID", SqlDbType.Int).Value = mStationID == null ? (Object)DBNull.Value : mStationID;
            sqlCommand.Parameters.Add("@LoginDate", SqlDbType.NVarChar).Value = mLoginDate == null ? (Object)DBNull.Value : mLoginDate;
            sqlCommand.Parameters.Add("@LoginTime", SqlDbType.NVarChar).Value = mLoginTime == null ? (Object)DBNull.Value : mLoginTime;
            sqlCommand.Parameters.Add("@LogoutDate", SqlDbType.NVarChar).Value = mLogoutDate == null ? (Object)DBNull.Value : mLogoutDate;
            sqlCommand.Parameters.Add("@LogoutTime", SqlDbType.NVarChar).Value = mLogoutTime == null ? (Object)DBNull.Value : mLogoutTime;
            sqlCommand.Parameters.Add("@Version", SqlDbType.NVarChar).Value = mVersion == null ? (Object)DBNull.Value : mVersion;
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        public int getOrdinal(string whereExpression, string sortExpression)
        {
            string strSQL = "";
            strSQL = "select [LoginLogsID] from [LoginLogs]" +
            (whereExpression == "" ? "" : " where " + whereExpression) +
            (sortExpression == "" ? "" : " order by " + sortExpression);
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataReader = sqlCommand.ExecuteReader();
                int index = 0;
                bool found = false;
                while (sqlDataReader.Read())
                {
                    if ((System.Int32)sqlDataReader["LoginLogsID"] == LoginLogsID)
                    {
                        found = true;
                        break;
                    }
                    index++;
                }
                sqlDataReader.Close();
                if (transaction == null) CloseConnection();
                if (found) return index; else return -1; ;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [LoginLogs] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [LoginLogs]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [LoginLogs] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [LoginLogs]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [LoginLogs] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [LoginLogs]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [LoginLogs] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [LoginLogs] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [LoginLogs]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [LoginLogs] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [LoginLogs] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [LoginLogs] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [LoginLogs] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [LoginLogs] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [LoginLogs]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [LoginLogs]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("delete from [LoginLogs]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [LoginLogs]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [LoginLogs]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("delete from [LoginLogs]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [LoginLogs]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "LoginLogs");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [LoginLogs]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "LoginLogs");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [LoginLogs]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [LoginLogs]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
       
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [LoginLogs]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid_SQL(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [LoginLogs]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static LoginLogsDL[] getInstances(string whereExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [LoginLogs]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "LoginLogs");
                LoginLogsDL[] LoginLogsDLs = new LoginLogsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    LoginLogsDLs[i] = new LoginLogsDL();
                    if (row["LoginLogsID"] != DBNull.Value)
                        LoginLogsDLs[i].LoginLogsID = (System.Int32)row["LoginLogsID"];

                    LoginLogsDLs[i].getInfo();
                    i++;
                }
                return LoginLogsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static LoginLogsDL[] getInstances(string whereExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [LoginLogs]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "LoginLogs");
                LoginLogsDL[] LoginLogsDLs = new LoginLogsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    LoginLogsDLs[i] = new LoginLogsDL(transaction);
                    if (row["LoginLogsID"] != DBNull.Value)
                        LoginLogsDLs[i].LoginLogsID = (System.Int32)row["LoginLogsID"];

                    LoginLogsDLs[i].getInfo();
                    i++;
                }
                return LoginLogsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static LoginLogsDL[] getInstances(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [LoginLogs]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                LoginLogsDL[] LoginLogsDLs = new LoginLogsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    LoginLogsDLs[i] = new LoginLogsDL();
                    if (row["LoginLogsID"] != DBNull.Value)
                        LoginLogsDLs[i].LoginLogsID = (System.Int32)row["LoginLogsID"];

                    LoginLogsDLs[i].getInfo();
                    i++;
                }
                return LoginLogsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static LoginLogsDL[] getInstances(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [LoginLogs]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                LoginLogsDL[] LoginLogsDLs = new LoginLogsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    LoginLogsDLs[i] = new LoginLogsDL(transaction);
                    if (row["LoginLogsID"] != DBNull.Value)
                        LoginLogsDLs[i].LoginLogsID = (System.Int32)row["LoginLogsID"];

                    LoginLogsDLs[i].getInfo();
                    i++;
                }
                return LoginLogsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static LoginLogsDL[] getInstances(string whereExpression, string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [LoginLogs]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                LoginLogsDL[] LoginLogsDLs = new LoginLogsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    LoginLogsDLs[i] = new LoginLogsDL();
                    if (row["LoginLogsID"] != DBNull.Value)
                        LoginLogsDLs[i].LoginLogsID = (System.Int32)row["LoginLogsID"];

                    LoginLogsDLs[i].getInfo();
                    i++;
                }
                return LoginLogsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static LoginLogsDL[] getInstances(string whereExpression, string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [LoginLogs]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                LoginLogsDL[] LoginLogsDLs = new LoginLogsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    LoginLogsDLs[i] = new LoginLogsDL(transaction);
                    if (row["LoginLogsID"] != DBNull.Value)
                        LoginLogsDLs[i].LoginLogsID = (System.Int32)row["LoginLogsID"];

                    LoginLogsDLs[i].getInfo();
                    i++;
                }
                return LoginLogsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }

        #endregion public methods 
        #region Constructors
        public LoginLogsDL()
        {

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");

        }
        public LoginLogsDL(System.Int32 LoginLogsID)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");
            this.LoginLogsID = LoginLogsID;

        }
        public LoginLogsDL(Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");

            this.transaction = transaction;

        }
        public LoginLogsDL(System.Int32 LoginLogsID, Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");
            this.LoginLogsID = LoginLogsID;

            this.transaction = transaction;

        }
        internal LoginLogsDL(BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");

        }
        internal LoginLogsDL(System.Int32 LoginLogsID, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");
            this.LoginLogsID = LoginLogsID;

        }
        internal LoginLogsDL(Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");

            this.transaction = transaction;

        }
        internal LoginLogsDL(System.Int32 LoginLogsID, Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("LoginLogsID", null);
            FieldValues.Add("UserID", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("LoginDate", null);
            FieldValues.Add("LoginTime", null);
            FieldValues.Add("LogoutDate", null);
            FieldValues.Add("LogoutTime", null);
            FieldValues.Add("Version", null);
            LoginDate = ("____/__/__");
            LoginTime = ("00:00");
            LogoutDate = ("____/__/__");
            LogoutTime = ("00:00");
            this.LoginLogsID = LoginLogsID;

            this.transaction = transaction;

        }

        #endregion Constructors
        #endregion Base properties and methods(generated by  CodeGenerator)

    }
}