using System;
using System.Data;
//using System.Data.SqlClient;
using Microsoft.Data.SqlClient;
using System.Collections;
using System.Linq;

namespace AtlasCellData.ADO
{
    public class StationsDL : BaseDataAccessLayerClass
    {
        #region Base properties and methods(generated by  CodeGenerator) 
        #region private variables
        private System.Int32 mStationID;
        private System.String mStationName;
        private StationTypeDL mStationType_StationTypeID;
        private System.Int32 mFWWidth;
        private System.Int32 mAllowableStopsInDay;
        private System.Int32 mMinNoOfEmptyBobins;
        private System.Int32 mSpeedMMin;
        private System.Boolean mIsActive;
        private System.Byte[] mRowTime;
        private System.String mInsDate;
        private System.String mInsTime;
        private UserDL mUser_InsUserID;
        private System.String mEditDate;
        private System.String mEditTime;
        private UserDL mUser_EditUserID;

        Hashtable FieldValues;
        private Transaction mTransaction;
        #endregion private variables
        #region properties
        /// <summary> 
        /// StationID/// </summary>	 
        //property for field StationID#
        public System.Int32 StationID
        {
            get
            {
                return mStationID;
            }
            set
            {
                mStationID = value;
                upwardShouldLoad();
                try { FieldValues["StationID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// StationName/// </summary>	 
        //property for field StationName#
        public System.String StationName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mStationName;
            }
            set
            {
                mStationName = value;
                try { FieldValues["StationName"] = value; } catch { }
            }
        }

        /// <summary> 
        /// StationTypeID/// </summary>	 
        //property for field StationTypeID#
        public StationTypeDL StationType_StationTypeID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mStationType_StationTypeID;
            }
            set
            {
                mStationType_StationTypeID = value;
                if (value != null) value.Parent = this;
                try { FieldValues["StationTypeID"] = value.StationTypeID; } catch { }

            }
        }
        /// <summary> 
        /// FWWidth/// </summary>	 
        //property for field FWWidth#
        public System.Int32 FWWidth
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mFWWidth;
            }
            set
            {
                mFWWidth = value;
                try { FieldValues["FWWidth"] = value; } catch { }
            }
        }
        /// <summary> 
        /// AllowableStopsInDay/// </summary>	 
        //property for field AllowableStopsInDay#
        public System.Int32 AllowableStopsInDay
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mAllowableStopsInDay;
            }
            set
            {
                mAllowableStopsInDay = value;
                try { FieldValues["AllowableStopsInDay"] = value; } catch { }
            }
        }
        /// <summary> 
        /// MinNoOfEmptyBobins/// </summary>	 
        //property for field MinNoOfEmptyBobins#
        public System.Int32 MinNoOfEmptyBobins
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mMinNoOfEmptyBobins;
            }
            set
            {
                mMinNoOfEmptyBobins = value;
                try { FieldValues["MinNoOfEmptyBobins"] = value; } catch { }
            }
        }
        /// <summary> 
        /// SpeedMMin/// </summary>	 
        //property for field SpeedMMin#
        public System.Int32 SpeedMMin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mSpeedMMin;
            }
            set
            {
                mSpeedMMin = value;
                try { FieldValues["SpeedMMin"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsActive/// </summary>	 
        //property for field IsActive#
        public System.Boolean IsActive
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsActive;
            }
            set
            {
                mIsActive = value;
                try { FieldValues["IsActive"] = value; } catch { }
            }
        }
        /// <summary> 
        /// RowTime/// </summary>	 
        //property for field RowTime#
        public System.Byte[] RowTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mRowTime;
            }
            set
            {
                mRowTime = value;
                try { FieldValues["RowTime"] = value; } catch { }
            }
        }
        /// <summary> 
        /// InsDate/// </summary>	 
        //property for field InsDate#
        public System.String InsDate
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mInsDate;
            }
            set
            {
                mInsDate = value;
                try { FieldValues["InsDate"] = value; } catch { }
            }
        }
        /// <summary> 
        /// InsTime/// </summary>	 
        //property for field InsTime#
        public System.String InsTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mInsTime;
            }
            set
            {
                mInsTime = value;
                try { FieldValues["InsTime"] = value; } catch { }
            }
        }
        /// <summary> 
        /// InsUserID/// </summary>	 
        //property for field InsUserID#
        public UserDL User_InsUserID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mUser_InsUserID;
            }
            set
            {
                mUser_InsUserID = value;
                if (value != null) value.Parent = this;
                try { FieldValues["InsUserID"] = value.UserID; } catch { }

            }
        }
        /// <summary> 
        /// EditDate/// </summary>	 
        //property for field EditDate#
        public System.String EditDate
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mEditDate;
            }
            set
            {
                mEditDate = value;
                try { FieldValues["EditDate"] = value; } catch { }
            }
        }
        /// <summary> 
        /// EditTime/// </summary>	 
        //property for field EditTime#
        public System.String EditTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mEditTime;
            }
            set
            {
                mEditTime = value;
                try { FieldValues["EditTime"] = value; } catch { }
            }
        }
        /// <summary> 
        /// EditUserID/// </summary>	 
        //property for field EditUserID#
        public UserDL User_EditUserID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mUser_EditUserID;
            }
            set
            {
                mUser_EditUserID = value;
                if (value != null) value.Parent = this;
                try { FieldValues["EditUserID"] = value.UserID; } catch { }

            }
        }
        public Transaction transaction
        {
            get
            {
                return mTransaction;
            }
            set
            {
                if (value != null)
                {
                    sqlConnection = value.sqlTransaction.Connection;
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.Transaction = value.sqlTransaction;
                }
                mTransaction = value;
            }
        }
        #endregion properties
        #region Private Methods
        internal override void upwardShouldLoad()
        {
            shouldLoad = true;
            if (Parent != null)
                Parent.upwardShouldLoad();
        }

        internal override void upwardShouldLoad(BaseDataAccessLayerClass child)
        {
        }
        #endregion
        #region public methods

        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_VeryOld()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [Stations]  where [StationID] ='" + this.StationID.ToString() + "'";
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["StationName"] != DBNull.Value)
                    StationName = (System.String)dt.Rows[0]["StationName"];
                if (dt.Rows[0]["StationTypeID"] != DBNull.Value)
                {
                    if (this.mStationType_StationTypeID == null) this.mStationType_StationTypeID = new StationTypeDL(transaction, this);
                    mStationType_StationTypeID.StationTypeID = (System.Int32)dt.Rows[0]["StationTypeID"];
                }
                else
                    mStationType_StationTypeID = null;
                if (dt.Rows[0]["FWWidth"] != DBNull.Value)
                    FWWidth = (System.Int32)dt.Rows[0]["FWWidth"];
                if (dt.Rows[0]["AllowableStopsInDay"] != DBNull.Value)
                    AllowableStopsInDay = (System.Int32)dt.Rows[0]["AllowableStopsInDay"];
                if (dt.Rows[0]["MinNoOfEmptyBobins"] != DBNull.Value)
                    MinNoOfEmptyBobins = (System.Int32)dt.Rows[0]["MinNoOfEmptyBobins"];
                if (dt.Rows[0]["SpeedMMin"] != DBNull.Value)
                    SpeedMMin = (System.Int32)dt.Rows[0]["SpeedMMin"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                {
                    if (this.mUser_InsUserID == null) this.mUser_InsUserID = new UserDL(transaction, this);
                    mUser_InsUserID.UserID = (System.Int32)dt.Rows[0]["InsUserID"];
                }
                else
                    mUser_InsUserID = null;
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                {
                    if (this.mUser_EditUserID == null) this.mUser_EditUserID = new UserDL(transaction, this);
                    mUser_EditUserID.UserID = (System.Int32)dt.Rows[0]["EditUserID"];
                }
                else
                    mUser_EditUserID = null;
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [Stations] WHERE StationID=@StationID";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@StationID", this.StationID));
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["StationName"] != DBNull.Value)
                    StationName = (System.String)dt.Rows[0]["StationName"];
                if (dt.Rows[0]["StationTypeID"] != DBNull.Value)
                {
                    if (this.mStationType_StationTypeID == null) this.mStationType_StationTypeID = new StationTypeDL(transaction, this);
                    mStationType_StationTypeID.StationTypeID = (System.Int32)dt.Rows[0]["StationTypeID"];
                }
                else
                    mStationType_StationTypeID = null;
                if (dt.Rows[0]["FWWidth"] != DBNull.Value)
                    FWWidth = (System.Int32)dt.Rows[0]["FWWidth"];
                if (dt.Rows[0]["AllowableStopsInDay"] != DBNull.Value)
                    AllowableStopsInDay = (System.Int32)dt.Rows[0]["AllowableStopsInDay"];
                if (dt.Rows[0]["MinNoOfEmptyBobins"] != DBNull.Value)
                    MinNoOfEmptyBobins = (System.Int32)dt.Rows[0]["MinNoOfEmptyBobins"];
                if (dt.Rows[0]["SpeedMMin"] != DBNull.Value)
                    SpeedMMin = (System.Int32)dt.Rows[0]["SpeedMMin"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                {
                    if (this.mUser_InsUserID == null) this.mUser_InsUserID = new UserDL(transaction, this);
                    mUser_InsUserID.UserID = (System.Int32)dt.Rows[0]["InsUserID"];
                }
                else
                    mUser_InsUserID = null;
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                {
                    if (this.mUser_EditUserID == null) this.mUser_EditUserID = new UserDL(transaction, this);
                    mUser_EditUserID.UserID = (System.Int32)dt.Rows[0]["EditUserID"];
                }
                else
                    mUser_EditUserID = null;
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_OLD(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                        sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                    else
                        sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "' and ";
                else
                if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "'";
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [Stations] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["StationName"] != DBNull.Value)
                    StationName = (System.String)dt.Rows[0]["StationName"];
                if (dt.Rows[0]["StationTypeID"] != DBNull.Value)
                {
                    if (this.mStationType_StationTypeID == null) this.mStationType_StationTypeID = new StationTypeDL(transaction, this);
                    mStationType_StationTypeID.StationTypeID = (System.Int32)dt.Rows[0]["StationTypeID"];
                }
                else
                    mStationType_StationTypeID = null;
                if (dt.Rows[0]["FWWidth"] != DBNull.Value)
                    FWWidth = (System.Int32)dt.Rows[0]["FWWidth"];
                if (dt.Rows[0]["AllowableStopsInDay"] != DBNull.Value)
                    AllowableStopsInDay = (System.Int32)dt.Rows[0]["AllowableStopsInDay"];
                if (dt.Rows[0]["MinNoOfEmptyBobins"] != DBNull.Value)
                    MinNoOfEmptyBobins = (System.Int32)dt.Rows[0]["MinNoOfEmptyBobins"];
                if (dt.Rows[0]["SpeedMMin"] != DBNull.Value)
                    SpeedMMin = (System.Int32)dt.Rows[0]["SpeedMMin"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                {
                    if (this.mUser_InsUserID == null) this.mUser_InsUserID = new UserDL(transaction, this);
                    mUser_InsUserID.UserID = (System.Int32)dt.Rows[0]["InsUserID"];
                }
                else
                    mUser_InsUserID = null;
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                {
                    if (this.mUser_EditUserID == null) this.mUser_EditUserID = new UserDL(transaction, this);
                    mUser_EditUserID.UserID = (System.Int32)dt.Rows[0]["EditUserID"];
                }
                else
                    mUser_EditUserID = null;
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                sWhereFields += "[" + fieldNames[i] + "]=@" + fieldNames[i];
                sWhereFields += (i < fieldNames.Length - 1 ? " and" : "");
            }
            sqlCommand.Parameters.Clear();
            SqlParameter param;
            for (int i = 0; i < fieldNames.Length; i++)
            {
                param = new SqlParameter();
                param.ParameterName = "@" + fieldNames[i];
                param.Value = FieldValues[fieldNames[i]];
                sqlCommand.Parameters.Add(param);
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [Stations] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["StationName"] != DBNull.Value)
                    StationName = (System.String)dt.Rows[0]["StationName"];
                if (dt.Rows[0]["StationTypeID"] != DBNull.Value)
                {
                    if (this.mStationType_StationTypeID == null) this.mStationType_StationTypeID = new StationTypeDL(transaction, this);
                    mStationType_StationTypeID.StationTypeID = (System.Int32)dt.Rows[0]["StationTypeID"];
                }
                else
                    mStationType_StationTypeID = null;
                if (dt.Rows[0]["FWWidth"] != DBNull.Value)
                    FWWidth = (System.Int32)dt.Rows[0]["FWWidth"];
                if (dt.Rows[0]["AllowableStopsInDay"] != DBNull.Value)
                    AllowableStopsInDay = (System.Int32)dt.Rows[0]["AllowableStopsInDay"];
                if (dt.Rows[0]["MinNoOfEmptyBobins"] != DBNull.Value)
                    MinNoOfEmptyBobins = (System.Int32)dt.Rows[0]["MinNoOfEmptyBobins"];
                if (dt.Rows[0]["SpeedMMin"] != DBNull.Value)
                    SpeedMMin = (System.Int32)dt.Rows[0]["SpeedMMin"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                {
                    if (this.mUser_InsUserID == null) this.mUser_InsUserID = new UserDL(transaction, this);
                    mUser_InsUserID.UserID = (System.Int32)dt.Rows[0]["InsUserID"];
                }
                else
                    mUser_InsUserID = null;
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                {
                    if (this.mUser_EditUserID == null) this.mUser_EditUserID = new UserDL(transaction, this);
                    mUser_EditUserID.UserID = (System.Int32)dt.Rows[0]["EditUserID"];
                }
                else
                    mUser_EditUserID = null;
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool Update()
        {
            string strSQL = "";
            strSQL = "update [Stations] set " +
            "[StationID]=" + mStationID.ToString() + "," +
            "[StationName]=N'" + mStationName.ToString() + "'," +
            "[StationTypeID]=" + (mStationType_StationTypeID != null ? "" + mStationType_StationTypeID.StationTypeID.ToString() + "" : "null") + "," +
            "[FWWidth]=" + mFWWidth.ToString() + "," +
            "[AllowableStopsInDay]=" + mAllowableStopsInDay.ToString() + "," +
            "[MinNoOfEmptyBobins]=" + mMinNoOfEmptyBobins.ToString() + "," +
            "[SpeedMMin]=" + mSpeedMMin.ToString() + "," +
            "[IsActive]=" + (IsActive ? "1" : "0") + "," +
            "[InsDate]=N'" + mInsDate.ToString() + "'," +
            "[InsTime]=N'" + mInsTime.ToString() + "'," +
            "[InsUserID]=" + (mUser_InsUserID != null ? "" + mUser_InsUserID.UserID.ToString() + "" : "null") + "," +
            "[EditDate]=N'" + mEditDate.ToString() + "'," +
            "[EditTime]=N'" + mEditTime.ToString() + "'," +
            "[EditUserID]=" + (mUser_EditUserID != null ? "" + mUser_EditUserID.UserID.ToString() + "" : "null") + ""
            ;
            strSQL += "  where [StationID] ='" + this.StationID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_SQL()
        {
            string strSQL = "";
            strSQL = "update [Stations] set StationID=@StationID,StationName=@StationName,StationTypeID=@StationTypeID,FWWidth=@FWWidth,AllowableStopsInDay=@AllowableStopsInDay,MinNoOfEmptyBobins=@MinNoOfEmptyBobins,SpeedMMin=@SpeedMMin,IsActive=@IsActive,InsDate=@InsDate,InsTime=@InsTime,InsUserID=@InsUserID,EditDate=@EditDate,EditTime=@EditTime,EditUserID=@EditUserID";
            strSQL += " WHERE StationID=@StationID ";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@StationID", SqlDbType.Int).Value = mStationID;
            sqlCommand.Parameters.Add("@StationName", SqlDbType.NVarChar).Value = mStationName == null ? (Object)DBNull.Value : mStationName;
            sqlCommand.Parameters.Add(new SqlParameter("@StationTypeID", mStationType_StationTypeID == null ? (Object)DBNull.Value : mStationType_StationTypeID.StationTypeID));
            sqlCommand.Parameters.Add("@FWWidth", SqlDbType.Int).Value = mFWWidth;
            sqlCommand.Parameters.Add("@AllowableStopsInDay", SqlDbType.Int).Value = mAllowableStopsInDay;
            sqlCommand.Parameters.Add("@MinNoOfEmptyBobins", SqlDbType.Int).Value = mMinNoOfEmptyBobins;
            sqlCommand.Parameters.Add("@SpeedMMin", SqlDbType.Int).Value = mSpeedMMin;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            sqlCommand.Parameters.Add("@InsDate", SqlDbType.NVarChar).Value = mInsDate == null ? (Object)DBNull.Value : mInsDate;
            sqlCommand.Parameters.Add("@InsTime", SqlDbType.NVarChar).Value = mInsTime == null ? (Object)DBNull.Value : mInsTime;
            sqlCommand.Parameters.Add(new SqlParameter("@InsUserID", mUser_InsUserID == null ? (Object)DBNull.Value : mUser_InsUserID.UserID));
            sqlCommand.Parameters.Add("@EditDate", SqlDbType.NVarChar).Value = mEditDate == null ? (Object)DBNull.Value : mEditDate;
            sqlCommand.Parameters.Add("@EditTime", SqlDbType.NVarChar).Value = mEditTime == null ? (Object)DBNull.Value : mEditTime;
            sqlCommand.Parameters.Add(new SqlParameter("@EditUserID", mUser_EditUserID == null ? (Object)DBNull.Value : mUser_EditUserID.UserID));
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_SQL(System.Int32 StationID)
        {
            string strSQL = "";
            strSQL = "update [Stations] set " +
            "[StationID]=" + mStationID.ToString() + "," +
            "[StationName]=N'" + mStationName.ToString() + "'," +
            "[StationTypeID]=" + (mStationType_StationTypeID != null ? "" + mStationType_StationTypeID.StationTypeID.ToString() + "" : "null") + "," +
            "[FWWidth]=" + mFWWidth.ToString() + "," +
            "[AllowableStopsInDay]=" + mAllowableStopsInDay.ToString() + "," +
            "[MinNoOfEmptyBobins]=" + mMinNoOfEmptyBobins.ToString() + "," +
            "[SpeedMMin]=" + mSpeedMMin.ToString() + "," +
            "[IsActive]=" + (mIsActive ? "1" : "0") + "," +
            "[InsDate]=N'" + mInsDate.ToString() + "'," +
            "[InsTime]=N'" + mInsTime.ToString() + "'," +
            "[InsUserID]=" + (mUser_InsUserID != null ? "" + mUser_InsUserID.UserID.ToString() + "" : "null") + "," +
            "[EditDate]=N'" + mEditDate.ToString() + "'," +
            "[EditTime]=N'" + mEditTime.ToString() + "'," +
            "[EditUserID]=" + (mUser_EditUserID != null ? "" + mUser_EditUserID.UserID.ToString() + "" : "null") + ""
            ;
            strSQL += "   where [StationID] ='" + this.StationID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete_OLD()
        {
            string strSQL = "";
            strSQL = "delete from [Stations]  where [StationID] ='" + this.StationID.ToString() + "'";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete_SQL()
        {
            string strSQL = "";
            strSQL = "delete from [Stations] WHERE StationID=@StationID";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@StationID", this.StationID));
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete(params string[] fieldNames)
        {
            if (!this.getInfo(fieldNames)) return false;
            string sWhereFields = "  ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
            }
            string strSQL = "";
            strSQL = "delete from [Stations] where " + sWhereFields;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }

        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void Append()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [Stations] ([StationID],[StationName],[StationTypeID],[FWWidth],[AllowableStopsInDay],[MinNoOfEmptyBobins],[SpeedMMin],[IsActive],[InsDate],[InsTime],[InsUserID],[EditDate],[EditTime],[EditUserID])" +
            "values (" +
            "" + mStationID.ToString() + "," +
            "N'" + mStationName.ToString() + "'," +
            (mStationType_StationTypeID != null ? "'" + mStationType_StationTypeID.StationTypeID.ToString() + "'," : "null,") +
            "" + mFWWidth.ToString() + "," +
            "" + mAllowableStopsInDay.ToString() + "," +
            "" + mMinNoOfEmptyBobins.ToString() + "," +
            "" + mSpeedMMin.ToString() + "," +
            (mIsActive ? "1" : "0") + "," +
            "N'" + mInsDate.ToString() + "'," +
            "N'" + mInsTime.ToString() + "'," +
            (mUser_InsUserID != null ? "'" + mUser_InsUserID.UserID.ToString() + "'," : "null,") +
            "N'" + mEditDate.ToString() + "'," +
            "N'" + mEditTime.ToString() + "'," +
            (mUser_EditUserID != null ? "'" + mUser_EditUserID.UserID.ToString() + "'" : "null") +
            ")";
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void append_SQL()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [Stations] ([StationID],[StationName],[StationTypeID],[FWWidth],[AllowableStopsInDay],[MinNoOfEmptyBobins],[SpeedMMin],[IsActive],[InsDate],[InsTime],[InsUserID],[EditDate],[EditTime],[EditUserID])" +
            "values (@StationID, @StationName, @StationTypeID, @FWWidth, @AllowableStopsInDay, @MinNoOfEmptyBobins, @SpeedMMin, @IsActive, @InsDate, @InsTime, @InsUserID, @EditDate, @EditTime, @EditUserID )";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@StationID", SqlDbType.Int).Value = mStationID;
            sqlCommand.Parameters.Add("@StationName", SqlDbType.NVarChar).Value = mStationName == null ? (Object)DBNull.Value : mStationName;
            sqlCommand.Parameters.Add(new SqlParameter("@StationTypeID", mStationType_StationTypeID == null ? (Object)DBNull.Value : mStationType_StationTypeID.StationTypeID));
            sqlCommand.Parameters.Add("@FWWidth", SqlDbType.Int).Value = mFWWidth;
            sqlCommand.Parameters.Add("@AllowableStopsInDay", SqlDbType.Int).Value = mAllowableStopsInDay;
            sqlCommand.Parameters.Add("@MinNoOfEmptyBobins", SqlDbType.Int).Value = mMinNoOfEmptyBobins;
            sqlCommand.Parameters.Add("@SpeedMMin", SqlDbType.Int).Value = mSpeedMMin;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            sqlCommand.Parameters.Add("@InsDate", SqlDbType.NVarChar).Value = mInsDate == null ? (Object)DBNull.Value : mInsDate;
            sqlCommand.Parameters.Add("@InsTime", SqlDbType.NVarChar).Value = mInsTime == null ? (Object)DBNull.Value : mInsTime;
            sqlCommand.Parameters.Add(new SqlParameter("@InsUserID", mUser_InsUserID == null ? (Object)DBNull.Value : mUser_InsUserID.UserID));
            sqlCommand.Parameters.Add("@EditDate", SqlDbType.NVarChar).Value = mEditDate == null ? (Object)DBNull.Value : mEditDate;
            sqlCommand.Parameters.Add("@EditTime", SqlDbType.NVarChar).Value = mEditTime == null ? (Object)DBNull.Value : mEditTime;
            sqlCommand.Parameters.Add(new SqlParameter("@EditUserID", mUser_EditUserID == null ? (Object)DBNull.Value : mUser_EditUserID.UserID));
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        public int getOrdinal(string whereExpression, string sortExpression)
        {
            string strSQL = "";
            strSQL = "select [StationID] from [Stations]" +
            (whereExpression == "" ? "" : " where " + whereExpression) +
            (sortExpression == "" ? "" : " order by " + sortExpression);
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataReader = sqlCommand.ExecuteReader();
                int index = 0;
                bool found = false;
                while (sqlDataReader.Read())
                {
                    if ((System.Int32)sqlDataReader["StationID"] == StationID)
                    {
                        found = true;
                        break;
                    }
                    index++;
                }
                sqlDataReader.Close();
                if (transaction == null) CloseConnection();
                if (found) return index; else return -1; ;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>
        public UserDL[] getUserStationID()
        {

            return UserDL.getInstances(" [StationID]='" + this.StationID.ToString() + "'", transaction);
        }
        public DataTable getUserStationIDDT()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return UserDL.getRecords("", " [StationID]='" + this.StationID.ToString() + "'", "", transaction);
        }
        /// <summary>		
        /// اين تابع تعداد ركوردهاي متناظر اين شي از جدول ارجاعي را  بر مي گرداند
        /// </summary>
        public long getUserStationIDCount()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return UserDL.count(" [StationID]='" + this.StationID.ToString() + "'", transaction);
        }

        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [Stations] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [Stations]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [Stations] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [Stations]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [Stations] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [Stations]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [Stations] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception)
                {
                    throw ;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [Stations] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [Stations]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [Stations] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [Stations] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [Stations] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [Stations] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [Stations] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [Stations]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [Stations]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("delete from [Stations]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [Stations]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [Stations]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("delete from [Stations]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [Stations]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Stations");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [Stations]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Stations");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [Stations]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [Stations]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }

        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [Stations]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid_SQL(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [Stations]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static StationsDL[] getInstances(string whereExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [Stations]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Stations");
                StationsDL[] StationsDLs = new StationsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    StationsDLs[i] = new StationsDL();
                    if (row["StationID"] != DBNull.Value)
                        StationsDLs[i].StationID = (System.Int32)row["StationID"];

                    StationsDLs[i].getInfo();
                    i++;
                }
                return StationsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static StationsDL[] getInstances(string whereExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [Stations]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "Stations");
                StationsDL[] StationsDLs = new StationsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    StationsDLs[i] = new StationsDL(transaction);
                    if (row["StationID"] != DBNull.Value)
                        StationsDLs[i].StationID = (System.Int32)row["StationID"];

                    StationsDLs[i].getInfo();
                    i++;
                }
                return StationsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static StationsDL[] getInstances(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [Stations]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                StationsDL[] StationsDLs = new StationsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    StationsDLs[i] = new StationsDL();
                    if (row["StationID"] != DBNull.Value)
                        StationsDLs[i].StationID = (System.Int32)row["StationID"];

                    StationsDLs[i].getInfo();
                    i++;
                }
                return StationsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static StationsDL[] getInstances(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [Stations]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                StationsDL[] StationsDLs = new StationsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    StationsDLs[i] = new StationsDL(transaction);
                    if (row["StationID"] != DBNull.Value)
                        StationsDLs[i].StationID = (System.Int32)row["StationID"];

                    StationsDLs[i].getInfo();
                    i++;
                }
                return StationsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static StationsDL[] getInstances(string whereExpression, string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [Stations]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                StationsDL[] StationsDLs = new StationsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    StationsDLs[i] = new StationsDL();
                    if (row["StationID"] != DBNull.Value)
                        StationsDLs[i].StationID = (System.Int32)row["StationID"];

                    StationsDLs[i].getInfo();
                    i++;
                }
                return StationsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static StationsDL[] getInstances(string whereExpression, string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [Stations]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                StationsDL[] StationsDLs = new StationsDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    StationsDLs[i] = new StationsDL(transaction);
                    if (row["StationID"] != DBNull.Value)
                        StationsDLs[i].StationID = (System.Int32)row["StationID"];

                    StationsDLs[i].getInfo();
                    i++;
                }
                return StationsDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }

        #endregion public methods 
        #region Constructors
        public StationsDL()
        {

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);

        }
        public StationsDL(System.Int32 StationID)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            this.StationID = StationID;

        }
        public StationsDL(Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);

            this.transaction = transaction;

        }
        public StationsDL(System.Int32 StationID, Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            this.StationID = StationID;

            this.transaction = transaction;

        }
        internal StationsDL(BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);

        }
        internal StationsDL(System.Int32 StationID, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            this.StationID = StationID;

        }
        internal StationsDL(Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);

            this.transaction = transaction;

        }
        internal StationsDL(System.Int32 StationID, Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("StationID", null);
            FieldValues.Add("StationName", null);
            FieldValues.Add("OrganizationalUnitID", null);
            FieldValues.Add("StationGroupID", null);
            FieldValues.Add("StationTypeID", null);
            FieldValues.Add("FWWidth", null);
            FieldValues.Add("AllowableStopsInDay", null);
            FieldValues.Add("MinNoOfEmptyBobins", null);
            FieldValues.Add("SpeedMMin", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            this.StationID = StationID;

            this.transaction = transaction;

        }

        #endregion Constructors
        #endregion Base properties and methods(generated by  CodeGenerator)

        public string BarcodeSign
        {
            get
            {
                return this.StationID.ToString("00");
            }
        }

    }
}


