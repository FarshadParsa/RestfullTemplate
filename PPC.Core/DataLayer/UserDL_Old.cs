using System;
using System.Data ;
//using System.Data.SqlClient  ;
using Microsoft.Data.SqlClient;
using System.Collections ;
using System.Linq;
using Microsoft.Data.SqlClient;
using PPC.Base.Extensions;

namespace AtlasCellData.ADO
{
    public class UserDL : BaseDataAccessLayerClass
    {
        #region Base properties and methods(generated by  CodeGenerator)
        # region private variables
        private System.Int32 mUserID;
        private System.String mFullName;
        private System.String mUserName;
        private System.String mUserPassword;
        private System.Byte? _domainID;
        private System.Byte _loginType;
        private System.String mDescription;
        private System.Boolean mCanLogin;
        private System.Boolean mIsEntered;
        private System.Boolean mIsActive;
        private System.Boolean mIsAdmin;
        private System.Boolean mIsSysAdmin;
        private System.Boolean mIsManager;
        private System.Boolean mIsSupervisor;
        private System.Boolean mIsExpert;
        private System.Boolean mIsSpecialUser;
        private System.Boolean mIsCustomerConfirmer;
        private System.String mMessageSignature;

        Hashtable FieldValues;
        private Transaction mTransaction;
        # endregion private variables
        # region properties
        /// <summary> 
        /// کلید
        /// </summary>	 
        //property for field UserID#
        public System.Int32 UserID
        {
            get
            {
                return mUserID;
            }
            set
            {
                if (mUserID != value)
                {
                    mUserID = value;
                    upwardShouldLoad();
                    try { FieldValues["UserID"] = value; }
                    catch { }
                }
            }
        }
        /// <summary> 
        /// نام کامل کاربر
        /// </summary>	 
        //property for field FullName#
        public System.String FullName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mFullName;
            }
            set
            {
                mFullName = value;
                try { FieldValues["FullName"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// کلمه شناسایی
        /// </summary>	 
        //property for field UserName#
        public System.String UserName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mUserName;
            }
            set
            {
                mUserName = value;
                try { FieldValues["UserName"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// کلمه عبور
        /// </summary>	 
        //property for field UserPassword#
        public System.String UserPassword
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mUserPassword;
            }
            set
            {
                mUserPassword = value;
                try { FieldValues["UserPassword"] = value; }
                catch { }
            }
        }
        public Byte? DomainID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return _domainID;
            }
            set
            {
                _domainID = value;
                try { FieldValues["DomainID"] = value; }
                catch { }
            }
        }
        public Byte LoginType
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return _loginType;
            }
            set
            {
                _loginType = value;
                try { FieldValues["LoginType"] = value; }
                catch { }
            }
        }

        /// <summary> 
        /// توضیحات
        /// </summary>	 
        //property for field Description#
        public System.String Description
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mDescription;
            }
            set
            {
                mDescription = value;
                try { FieldValues["Description"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// آیا می تواند وارد شود؟
        /// </summary>	 
        //property for field CanLogin#
        public System.Boolean CanLogin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mCanLogin;
            }
            set
            {
                mCanLogin = value;
                try { FieldValues["CanLogin"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// آیا وراد شده است
        /// </summary>	 
        //property for field IsEntered#
        public System.Boolean IsEntered
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsEntered;
            }
            set
            {
                mIsEntered = value;
                try { FieldValues["IsEntered"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// فعال است؟
        /// </summary>	 
        //property for field IsActive#
        public System.Boolean IsActive
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsActive;
            }
            set
            {
                mIsActive = value;
                try { FieldValues["IsActive"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// IsAdmin/// </summary>	 
        //property for field IsAdmin#
        public System.Boolean IsAdmin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsAdmin || mUserID.Equals(0);
            }
            set
            {
                mIsAdmin = value;
                try { FieldValues["IsAdmin"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// IsSysAdmin/// </summary>	 
        //property for field IsSysAdmin#
        public System.Boolean IsSysAdmin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsSysAdmin || mUserID.Equals(0) || mUserName.ToLower().Equals("administrator");
            }
            set
            {
                mIsSysAdmin = value;
                try { FieldValues["IsSysAdmin"] = value; }
                catch { }
            }
        }

        /// <summary> 
        /// IsManager/// </summary>	 
        /// property for field IsManager#
        public System.Boolean IsManager
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsManager;
            }
            set
            {
                mIsManager = value;
                try { FieldValues["IsManager"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// IsSupervisor/// </summary>	 
        /// property for field IsSupervisor#
        public System.Boolean IsSupervisor
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsSupervisor;
            }
            set
            {
                mIsSupervisor = value;
                try { FieldValues["IsSupervisor"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// IsExpert/// </summary>	 
        /// property for field IsExpert#
        public System.Boolean IsExpert
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsExpert;
            }
            set
            {
                mIsExpert = value;
                try { FieldValues["IsExpert"] = value; }
                catch { }
            }
        }

        /// <summary> 
        /// IsExpert/// </summary>	 
        /// property for field IsSpecialUser#
        public System.Boolean IsSpecialUser
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsSpecialUser;
            }
            set
            {
                mIsSpecialUser = value;
                try { FieldValues["IsSpecialUser"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// IsExpert/// </summary>	 
        /// property for field IsCustomerConfirmer#
        public System.Boolean IsCustomerConfirmer
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsCustomerConfirmer;
            }
            set
            {
                mIsCustomerConfirmer = value;
                try { FieldValues["IsCustomerConfirmer"] = value; }
                catch { }
            }
        }
        /// <summary> 
        /// MessageSignature/// </summary>	 
        //property for field MessageSignature#
        public System.String MessageSignature
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mMessageSignature;
            }
            set
            {
                mMessageSignature = value;
                try { FieldValues["MessageSignature"] = value; }
                catch { }
            }
        }
        public Transaction transaction
        {
            get
            {
                return mTransaction;
            }
            set
            {
                if (value != null)
                {
                    sqlConnection = value.sqlTransaction.Connection;
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.Transaction = value.sqlTransaction;
                }
                mTransaction = value;
            }
        }
        # endregion properties
        #region Private Methods
        internal override void upwardShouldLoad()
        {
            shouldLoad = true;
            if (Parent != null)
                Parent.upwardShouldLoad();
        }

        internal override void upwardShouldLoad(BaseDataAccessLayerClass child)
        {
        }
        #endregion
        #region public methods
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [User]  where [UserID] ='" + this.UserID.ToString() + "'";
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                    UserID = (System.Int32)dt.Rows[0]["UserID"];
                if (dt.Rows[0]["FullName"] != DBNull.Value)
                    FullName = (System.String)dt.Rows[0]["FullName"];
                if (dt.Rows[0]["UserName"] != DBNull.Value)
                    UserName = (System.String)dt.Rows[0]["UserName"];
                if (dt.Rows[0]["UserPassword"] != DBNull.Value)
                    UserPassword = (System.String)dt.Rows[0]["UserPassword"];
                if (dt.Rows[0]["DomainID"] != DBNull.Value)
                    DomainID = dt.Rows[0]["DomainID"].ToByte();
                else
                    DomainID = null;
                LoginType = dt.Rows[0]["LoginType"] != DBNull.Value ? dt.Rows[0]["LoginType"].ToByte() : "0".ToByte();

                if (dt.Rows[0]["Description"] != DBNull.Value)
                    Description = (System.String)dt.Rows[0]["Description"];
                if (dt.Rows[0]["CanLogin"] != DBNull.Value)
                    CanLogin = (System.Boolean)dt.Rows[0]["CanLogin"];
                if (dt.Rows[0]["IsEntered"] != DBNull.Value)
                    IsEntered = (System.Boolean)dt.Rows[0]["IsEntered"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["IsAdmin"] != DBNull.Value)
                    IsAdmin = (System.Boolean)dt.Rows[0]["IsAdmin"];
                if (dt.Rows[0]["IsSysAdmin"] != DBNull.Value)
                    IsSysAdmin = (System.Boolean)dt.Rows[0]["IsSysAdmin"];
                if (dt.Rows[0]["IsManager"] != DBNull.Value)
                    IsManager = (System.Boolean)dt.Rows[0]["IsManager"];
                if (dt.Rows[0]["IsSupervisor"] != DBNull.Value)
                    IsSupervisor = (System.Boolean)dt.Rows[0]["IsSupervisor"];
                if (dt.Rows[0]["IsExpert"] != DBNull.Value)
                    IsExpert = (System.Boolean)dt.Rows[0]["IsExpert"];
                if (dt.Rows[0]["IsSpecialUser"] != DBNull.Value)
                    IsSpecialUser = (System.Boolean)dt.Rows[0]["IsSpecialUser"];
                if (dt.Rows[0]["IsCustomerConfirmer"] != DBNull.Value)
                    IsCustomerConfirmer = (System.Boolean)dt.Rows[0]["IsCustomerConfirmer"];
                if (dt.Rows[0]["MessageSignature"] != DBNull.Value)
                    MessageSignature = (System.String)dt.Rows[0]["MessageSignature"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                        sWhereFields += "[" + fieldNames[i] + "]=N'" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                    else
                        sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "' and ";
                else
                    if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                    sWhereFields += "[" + fieldNames[i] + "]=N'" + (FieldValues[fieldNames[i]]).ToString() + "'";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "'";
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [User] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                    UserID = (System.Int32)dt.Rows[0]["UserID"];
                if (dt.Rows[0]["FullName"] != DBNull.Value)
                    FullName = (System.String)dt.Rows[0]["FullName"];
                if (dt.Rows[0]["UserName"] != DBNull.Value)
                    UserName = (System.String)dt.Rows[0]["UserName"];
                if (dt.Rows[0]["UserPassword"] != DBNull.Value)
                    UserPassword = (System.String)dt.Rows[0]["UserPassword"];
                if (dt.Rows[0]["DomainID"] != DBNull.Value)
                    DomainID = dt.Rows[0]["DomainID"].ToByte();
                else
                    DomainID = null;
                LoginType = dt.Rows[0]["LoginType"] != DBNull.Value ? dt.Rows[0]["LoginType"].ToByte() : "0".ToByte();

                if (dt.Rows[0]["Description"] != DBNull.Value)
                    Description = (System.String)dt.Rows[0]["Description"];
                if (dt.Rows[0]["CanLogin"] != DBNull.Value)
                    CanLogin = (System.Boolean)dt.Rows[0]["CanLogin"];
                if (dt.Rows[0]["IsEntered"] != DBNull.Value)
                    IsEntered = (System.Boolean)dt.Rows[0]["IsEntered"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["IsAdmin"] != DBNull.Value)
                    IsAdmin = (System.Boolean)dt.Rows[0]["IsAdmin"];
                if (dt.Rows[0]["IsSysAdmin"] != DBNull.Value)
                    IsSysAdmin = (System.Boolean)dt.Rows[0]["IsSysAdmin"];
                if (dt.Rows[0]["IsManager"] != DBNull.Value)
                    IsManager = (System.Boolean)dt.Rows[0]["IsManager"];
                if (dt.Rows[0]["IsSupervisor"] != DBNull.Value)
                    IsSupervisor = (System.Boolean)dt.Rows[0]["IsSupervisor"];
                if (dt.Rows[0]["IsExpert"] != DBNull.Value)
                    IsExpert = (System.Boolean)dt.Rows[0]["IsExpert"];
                if (dt.Rows[0]["IsSpecialUser"] != DBNull.Value)
                    IsSpecialUser = (System.Boolean)dt.Rows[0]["IsSpecialUser"];
                if (dt.Rows[0]["IsCustomerConfirmer"] != DBNull.Value)
                    IsCustomerConfirmer = (System.Boolean)dt.Rows[0]["IsCustomerConfirmer"];
                if (dt.Rows[0]["MessageSignature"] != DBNull.Value)
                    MessageSignature = (System.String)dt.Rows[0]["MessageSignature"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_OLD()
        {
            string strSQL = "";
            strSQL = "update [User] set " +
            "[UserID]=" + mUserID.ToString() + "," +
            "[FullName]=N'" + mFullName.ToString() + "'," +
            "[UserName]=N'" + mUserName.ToString() + "'," +
            "[UserPassword]=N'" + mUserPassword.ToString() + "'," +
            "[DomainID]=" + "" + (_domainID.IsNull() ? "Null" : _domainID.ToString()) + "," +
            "[LoginType]=" + "'" + _loginType.ToString() + "'," +
            "[Description]=N'" + mDescription.ToString() + "'," +
            "[CanLogin]=" + (CanLogin ? "1" : "0") + "," +
            "[IsEntered]=" + (IsEntered ? "1" : "0") + "," +
            "[IsActive]=" + (IsActive ? "1" : "0") + "," +
            "[IsAdmin]=" + (IsAdmin ? "1" : "0") + "," +
            "[IsSysAdmin]=" + (IsSysAdmin ? "1" : "0") + "," +
            "[IsManager]=" + (IsManager ? "1" : "0") + "," +
            "[IsSupervisor]=" + (IsSupervisor ? "1" : "0") + "," +
            "[IsExpert]=" + (IsExpert ? "1" : "0") + "," +
            "[IsSpecialUser]=" + (IsSpecialUser ? "1" : "0") + "," +
            "[IsCustomerConfirmer]=" + (IsCustomerConfirmer ? "1" : "0") + "," +
            "[MessageSignature]=N'" + mMessageSignature.ToString() + "'"
            ;
            strSQL += "  where [UserID] ='" + this.UserID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }


        /// <summary>
        /// ظٹع© ط±ع©ظˆط±ط¯ ط®ط§طµ ط±ط§ ظˆظٹط±ط§ظٹط´ ظ…ظٹ ع©ظ†ط¯
        /// </summary>
        public bool update()
        {
            string strSQL = "";
            strSQL = "update [User] set UserID=@UserID,FullName=@FullName,UserName=@UserName,UserPassword=@UserPassword,[DomainID]=@DomainID,[LoginType]=@LoginType,Description=@Description,CanLogin=@CanLogin,IsEntered=@IsEntered,IsActive=@IsActive,IsAdmin=@IsAdmin,IsSysAdmin=@IsSysAdmin,IsManager=@IsManager,IsSupervisor=@IsSupervisor,IsExpert=@IsExpert,IsSpecialUser=@IsSpecialUser,IsCustomerConfirmer=@IsCustomerConfirmer,MessageSignature=@MessageSignature";
            strSQL += " WHERE [UserID]=@UserID ";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@UserID", SqlDbType.Int).Value = mUserID;
            sqlCommand.Parameters.Add("@FullName", SqlDbType.NVarChar).Value = mFullName == null ? (Object)DBNull.Value : mFullName;
            sqlCommand.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = mUserName == null ? (Object)DBNull.Value : mUserName;
            sqlCommand.Parameters.Add("@UserPassword", SqlDbType.NVarChar).Value = mUserPassword == null ? (Object)DBNull.Value : mUserPassword;
            sqlCommand.Parameters.Add("@DomainID", SqlDbType.TinyInt).Value = _domainID == null ? (Object)DBNull.Value : _domainID;
            sqlCommand.Parameters.Add("@LoginType", SqlDbType.TinyInt).Value = _loginType == null ? (Object)DBNull.Value : _loginType;
            sqlCommand.Parameters.Add("@Description", SqlDbType.NVarChar).Value = mDescription == null ? (Object)DBNull.Value : mDescription;
            sqlCommand.Parameters.Add("@CanLogin", SqlDbType.Bit).Value = mCanLogin ? true : false;
            sqlCommand.Parameters.Add("@IsEntered", SqlDbType.Bit).Value = mIsEntered ? true : false;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            sqlCommand.Parameters.Add("@IsAdmin", SqlDbType.Bit).Value = mIsAdmin ? true : false;
            sqlCommand.Parameters.Add("@IsSysAdmin", SqlDbType.Bit).Value = mIsSysAdmin ? true : false;
            sqlCommand.Parameters.Add("@IsManager", SqlDbType.Bit).Value = mIsManager ? true : false;
            sqlCommand.Parameters.Add("@IsSupervisor", SqlDbType.Bit).Value = mIsSupervisor ? true : false;
            sqlCommand.Parameters.Add("@IsExpert", SqlDbType.Bit).Value = mIsExpert ? true : false;
            sqlCommand.Parameters.Add("@IsSpecialUser", SqlDbType.Bit).Value = mIsSpecialUser ? true : false;
            //sqlCommand.Parameters.Add("@IsSpecialUser", SqlDbType.Bit).Value =  ? true : false;
            sqlCommand.Parameters.Add("@IsCustomerConfirmer", SqlDbType.Bit).Value = mIsCustomerConfirmer ? true : false;
            sqlCommand.Parameters.Add("@MessageSignature", SqlDbType.NVarChar).Value = mMessageSignature == null ? (Object)DBNull.Value : mMessageSignature;
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }

        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update(System.Int32 UserID)
        {
            string strSQL = "";
            strSQL = "update [User] set " +
            "[UserID]=" + mUserID.ToString() + "," +
            "[FullName]=N'" + mFullName.ToString() + "'," +
            "[UserName]=N'" + mUserName.ToString() + "'," +
            "[UserPassword]=N'" + mUserPassword.ToString() + "'," +
            "[DomainID]=" + "" + (_domainID.IsNull() ? "Null" : _domainID.ToString()) + "," +
            "[LoginType]=" + "'" + _loginType.ToString() + "'," +
            "[Description]=N'" + mDescription.ToString() + "'," +
            "[CanLogin]=" + (mCanLogin ? "1" : "0") + "," +
            "[IsEntered]=" + (mIsEntered ? "1" : "0") + "," +
            "[IsActive]=" + (mIsActive ? "1" : "0") + "," +
            "[IsAdmin]=" + (IsAdmin ? "1" : "0") + "," +
            "[IsSysAdmin]=" + (mIsSysAdmin ? "1" : "0") + "," +
            "[IsManager]=" + (IsManager ? "1" : "0") + "," +
            "[IsSupervisor]=" + (IsSupervisor ? "1" : "0") + "," +
            "[IsExpert]=" + (IsExpert ? "1" : "0") + "," +
            "[IsSpecialUser]=" + (IsSpecialUser ? "1" : "0") + "," +
            "[IsCustomerConfirmer]=" + (IsCustomerConfirmer ? "1" : "0") + "," +
            "[MessageSignature]=N'" + mMessageSignature.ToString() + "'"
            ;
            strSQL += "   where [UserID] ='" + this.UserID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete()
        {
            string strSQL = "";
            strSQL = "delete from [User]  where [UserID] ='" + this.UserID.ToString() + "'";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete(params string[] fieldNames)
        {
            if (!this.getInfo(fieldNames)) return false;
            string sWhereFields = "  ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
            }
            string strSQL = "";
            strSQL = "delete from [User] where " + sWhereFields;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void append()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [User] ([UserID],[FullName],[UserName],[UserPassword],DomainID,LoginType,[Description],[CanLogin],[IsEntered],[IsActive],[IsAdmin],[IsSysAdmin],[IsManager],[IsSupervisor],[IsExpert],[IsSpecialUser],[IsCustomerConfirmer],[MessageSignature])" +
            "values (" +
            "" + mUserID.ToString() + "," +
            "N'" + mFullName.ToString() + "'," +
            "N'" + mUserName.ToString() + "'," +
            "N'" + mUserPassword.ToString() + "'," +
            "'" + _domainID.ToString() + "'," +
            "'" + _loginType.ToString() + "'," +
            "N'" + mDescription.ToString() + "'," +
            (mCanLogin ? "1" : "0") + "," +
            (mIsEntered ? "1" : "0") + "," +
            (mIsActive ? "1" : "0") + "," +
            (mIsAdmin ? "1" : "0") + "," +
            (mIsSysAdmin ? "1" : "0") + "," +
            (mIsManager ? "1" : "0") + "," +
            (mIsSupervisor ? "1" : "0") + "," +
            (mIsExpert ? "1" : "0") + "," +
            (mIsSpecialUser ? "1" : "0") + "," +
            (mIsCustomerConfirmer ? "1" : "0") + "," +
            "N'" + mMessageSignature.ToString() + "'" +
            ")";
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        public int getOrdinal(string whereExpression, string sortExpression)
        {
            string strSQL = "";
            strSQL = "select [UserID] from [User]" +
            (whereExpression == "" ? "" : " where " + whereExpression) +
            (sortExpression == "" ? "" : " order by " + sortExpression);
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataReader = sqlCommand.ExecuteReader();
                int index = 0;
                bool found = false;
                while (sqlDataReader.Read())
                {
                    if ((System.Int32)sqlDataReader["UserID"] == UserID)
                    {
                        found = true;
                        break;
                    }
                    index++;
                }
                sqlDataReader.Close();
                if (transaction == null) CloseConnection();
                if (found) return index; else return -1; ;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
       
        public static object aggregate(AggregateType type, string fieldName, string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [User] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [User]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return (ret == null || ret == DBNull.Value) ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [User] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [User]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [User] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [User]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [User] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [User]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [User] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [User] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [User] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [User] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [User]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [User]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [User]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [User]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL();
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                } return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL(transaction);
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                } return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL();
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                } return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL(transaction);
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                } return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }

        #endregion public methods
        #region Constructors
        public UserDL()
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;
            MessageSignature = "";

        }
        public UserDL(System.Int32 UserID)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;
            this.UserID = UserID;

        }
        public UserDL(Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;

            this.transaction = transaction;

        }
        public UserDL(System.Int32 UserID, Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;
            this.UserID = UserID;

            this.transaction = transaction;

        }
        internal UserDL(BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;

        }
        internal UserDL(System.Int32 UserID, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;
            this.UserID = UserID;

        }
        internal UserDL(Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;

            this.transaction = transaction;

        }
        internal UserDL(System.Int32 UserID, Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("UserPassword", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("MessageSignature", null);
            CanLogin = false;
            IsEntered = false;
            IsActive = false;
            IsSysAdmin = false;
            this.UserID = UserID;

            this.transaction = transaction;

        }

        #endregion Constructors
        #endregion Base properties and methods(generated by  CodeGenerator)

        #region For Authorization
        public static bool hasUserAccessToStation(int UserID, string StationID)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = b.sqlConnection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format(@"SELECT     COUNT(*) AS Expr1
FROM         dbo.UserGroup INNER JOIN
                      dbo.Stations INNER JOIN
                      dbo.UserGroupStation ON dbo.Stations.StationID = dbo.UserGroupStation.StationID ON 
                      dbo.UserGroup.UserGroupID = dbo.UserGroupStation.UserGroupID INNER JOIN
                      dbo.UserGroupAssign ON dbo.UserGroup.UserGroupID = dbo.UserGroupAssign.UserGroupID INNER JOIN
                      dbo.[User] ON dbo.UserGroupAssign.UserID = dbo.[User].UserID
WHERE     (dbo.[User].UserID = '{0}') AND (dbo.Stations.StationID = '{1}')", UserID.ToString(), StationID.ToString());
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, "User");
                if (DS.Tables[0].Rows[0][0].ToString() == "0")
                    return false;
                return true;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        #endregion


    }
}