using System;
using System.Data;
//using Microsoft.Data.SqlClient.  ;
using Microsoft.Data.SqlClient;
using System.Collections;
using System.Linq;
using Microsoft.Data.SqlClient;
using WebApi.Base.Extensions;

namespace AtlasCellData.ADO
{
    public class UserDL : BaseDataAccessLayerClass
    {
        #region Base properties and methods(generated by  CodeGenerator) 
        #region private variables
        private System.Int32 mUserID;
        private System.String mFullName;
        private System.String mUserName;
        private System.String mPassword;
        private System.String mLast;
        private Nullable<System.Int32> mStationID;
        private Nullable<System.Byte> mAuthenticationType;
        private System.String mDescription;
        private Nullable<System.Byte> mDomainID;
        private System.Byte mLoginType;
        private System.Boolean mCanLogin;
        private System.Boolean mIsEntered;
        private System.Boolean mIsActive;
        private System.Boolean mIsAdmin;
        private System.Boolean mIsSysAdmin;
        private System.Boolean mIsManager;
        private System.Boolean mIsSupervisor;
        private System.Boolean mIsExpert;
        private System.Boolean mIsOperator;
        private System.Boolean mIsSpecialUser;
        private System.Boolean mGetUrgentRequest;
        private System.String mMessageSignature;
        private System.String mInsDate;
        private System.String mInsTime;
        private System.Int32 mInsUserID;
        private System.String mEditDate;
        private System.String mEditTime;
        private System.Int32 mEditUserID;
        private System.DateTime mSysDateTime;
        private System.Byte[] mRowTime;

        Hashtable FieldValues;
        private Transaction mTransaction;
        #endregion private variables
        #region properties
        /// <summary> 
        /// UserID/// </summary>	 
        //property for field UserID#
        public System.Int32 UserID
        {
            get
            {
                return mUserID;
            }
            set
            {
                mUserID = value;
                upwardShouldLoad();
                try { FieldValues["UserID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// FullName/// </summary>	 
        //property for field FullName#
        public System.String FullName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mFullName;
            }
            set
            {
                mFullName = value;
                try { FieldValues["FullName"] = value; } catch { }
            }
        }
        /// <summary> 
        /// UserName/// </summary>	 
        //property for field UserName#
        public System.String UserName
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mUserName;
            }
            set
            {
                mUserName = value;
                try { FieldValues["UserName"] = value; } catch { }
            }
        }
        /// <summary> 
        /// Password/// </summary>	 
        //property for field Password#
        public System.String Password
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mPassword;
            }
            set
            {
                mPassword = value;
                try { FieldValues["Password"] = value; } catch { }
            }
        }
        /// <summary> 
        /// Last/// </summary>	 
        //property for field Last#
        public System.String Last
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mLast;
            }
            set
            {
                mLast = value;
                try { FieldValues["Last"] = value; } catch { }
            }
        }
        /// <summary> 
        /// StationID/// </summary>	 
        //property for field StationID#
        public Nullable<System.Int32> StationID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mStationID;
            }
            set
            {
                mStationID = value;
                try { FieldValues["StationID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// AuthenticationType/// </summary>	 
        //property for field AuthenticationType#
        public Nullable<System.Byte> AuthenticationType
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mAuthenticationType;
            }
            set
            {
                mAuthenticationType = value;
                try { FieldValues["AuthenticationType"] = value; } catch { }
            }
        }
        /// <summary> 
        /// Description/// </summary>	 
        //property for field Description#
        public System.String Description
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mDescription;
            }
            set
            {
                mDescription = value;
                try { FieldValues["Description"] = value; } catch { }
            }
        }
        /// <summary> 
        /// DomainID/// </summary>	 
        //property for field DomainID#
        public Nullable<System.Byte> DomainID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mDomainID;
            }
            set
            {
                mDomainID = value;
                try { FieldValues["DomainID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// LoginType/// </summary>	 
        //property for field LoginType#
        public System.Byte LoginType
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mLoginType;
            }
            set
            {
                mLoginType = value;
                try { FieldValues["LoginType"] = value; } catch { }
            }
        }
        /// <summary> 
        /// CanLogin/// </summary>	 
        //property for field CanLogin#
        public System.Boolean CanLogin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mCanLogin;
            }
            set
            {
                mCanLogin = value;
                try { FieldValues["CanLogin"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsEntered/// </summary>	 
        //property for field IsEntered#
        public System.Boolean IsEntered
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsEntered;
            }
            set
            {
                mIsEntered = value;
                try { FieldValues["IsEntered"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsActive/// </summary>	 
        //property for field IsActive#
        public System.Boolean IsActive
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsActive;
            }
            set
            {
                mIsActive = value;
                try { FieldValues["IsActive"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsAdmin/// </summary>	 
        //property for field IsAdmin#
        public System.Boolean IsAdmin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsAdmin;
            }
            set
            {
                mIsAdmin = value;
                try { FieldValues["IsAdmin"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsSysAdmin/// </summary>	 
        //property for field IsSysAdmin#
        public System.Boolean IsSysAdmin
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsSysAdmin;
            }
            set
            {
                mIsSysAdmin = value;
                try { FieldValues["IsSysAdmin"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsManager/// </summary>	 
        //property for field IsManager#
        public System.Boolean IsManager
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsManager;
            }
            set
            {
                mIsManager = value;
                try { FieldValues["IsManager"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsSupervisor/// </summary>	 
        //property for field IsSupervisor#
        public System.Boolean IsSupervisor
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsSupervisor;
            }
            set
            {
                mIsSupervisor = value;
                try { FieldValues["IsSupervisor"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsExpert/// </summary>	 
        //property for field IsExpert#
        public System.Boolean IsExpert
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsExpert;
            }
            set
            {
                mIsExpert = value;
                try { FieldValues["IsExpert"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsOperator/// </summary>	 
        //property for field IsOperator#
        public System.Boolean IsOperator
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsOperator;
            }
            set
            {
                mIsOperator = value;
                try { FieldValues["IsOperator"] = value; } catch { }
            }
        }
        /// <summary> 
        /// IsSpecialUser/// </summary>	 
        //property for field IsSpecialUser#
        public System.Boolean IsSpecialUser
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mIsSpecialUser;
            }
            set
            {
                mIsSpecialUser = value;
                try { FieldValues["IsSpecialUser"] = value; } catch { }
            }
        }
        /// <summary> 
        /// GetUrgentRequest/// </summary>	 
        //property for field GetUrgentRequest#
        public System.Boolean GetUrgentRequest
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mGetUrgentRequest;
            }
            set
            {
                mGetUrgentRequest = value;
                try { FieldValues["GetUrgentRequest"] = value; } catch { }
            }
        }
        /// <summary> 
        /// MessageSignature/// </summary>	 
        //property for field MessageSignature#
        public System.String MessageSignature
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mMessageSignature;
            }
            set
            {
                mMessageSignature = value;
                try { FieldValues["MessageSignature"] = value; } catch { }
            }
        }
        /// <summary> 
        /// InsDate/// </summary>	 
        //property for field InsDate#
        public System.String InsDate
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mInsDate;
            }
            set
            {
                mInsDate = value;
                try { FieldValues["InsDate"] = value; } catch { }
            }
        }
        /// <summary> 
        /// InsTime/// </summary>	 
        //property for field InsTime#
        public System.String InsTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mInsTime;
            }
            set
            {
                mInsTime = value;
                try { FieldValues["InsTime"] = value; } catch { }
            }
        }
        /// <summary> 
        /// InsUserID/// </summary>	 
        //property for field InsUserID#
        public System.Int32 InsUserID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mInsUserID;
            }
            set
            {
                mInsUserID = value;
                try { FieldValues["InsUserID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// EditDate/// </summary>	 
        //property for field EditDate#
        public System.String EditDate
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mEditDate;
            }
            set
            {
                mEditDate = value;
                try { FieldValues["EditDate"] = value; } catch { }
            }
        }
        /// <summary> 
        /// EditTime/// </summary>	 
        //property for field EditTime#
        public System.String EditTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mEditTime;
            }
            set
            {
                mEditTime = value;
                try { FieldValues["EditTime"] = value; } catch { }
            }
        }
        /// <summary> 
        /// EditUserID/// </summary>	 
        //property for field EditUserID#
        public System.Int32 EditUserID
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mEditUserID;
            }
            set
            {
                mEditUserID = value;
                try { FieldValues["EditUserID"] = value; } catch { }
            }
        }
        /// <summary> 
        /// SysDateTime/// </summary>	 
        //property for field SysDateTime#
        public System.DateTime SysDateTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mSysDateTime;
            }
            set
            {
                mSysDateTime = value;
                try { FieldValues["SysDateTime"] = value; } catch { }
            }
        }
        /// <summary> 
        /// RowTime/// </summary>	 
        //property for field RowTime#
        public System.Byte[] RowTime
        {
            get
            {
                if (shouldLoad)
                {
                    this.getInfo();
                    shouldLoad = false;
                }
                return mRowTime;
            }
            set
            {
                mRowTime = value;
                try { FieldValues["RowTime"] = value; } catch { }
            }
        }
        public Transaction transaction
        {
            get
            {
                return mTransaction;
            }
            set
            {
                if (value != null)
                {
                    sqlConnection = value.sqlTransaction.Connection;
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.Transaction = value.sqlTransaction;
                }
                mTransaction = value;
            }
        }
        #endregion properties
        #region Private Methods
        internal override void upwardShouldLoad()
        {
            shouldLoad = true;
            if (Parent != null)
                Parent.upwardShouldLoad();
        }

        internal override void upwardShouldLoad(BaseDataAccessLayerClass child)
        {
        }
        #endregion
        #region public methods
       
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_OldADO()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [User]  where [UserID] ='" + this.UserID.ToString() + "'";
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                    UserID = (System.Int32)dt.Rows[0]["UserID"];
                if (dt.Rows[0]["FullName"] != DBNull.Value)
                    FullName = (System.String)dt.Rows[0]["FullName"];
                if (dt.Rows[0]["UserName"] != DBNull.Value)
                    UserName = (System.String)dt.Rows[0]["UserName"];
                if (dt.Rows[0]["Password"] != DBNull.Value)
                    Password = (System.String)dt.Rows[0]["Password"];
                if (dt.Rows[0]["Last"] != DBNull.Value)
                    Last = (System.String)dt.Rows[0]["Last"];
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["AuthenticationType"] != DBNull.Value)
                    AuthenticationType = (System.Byte)dt.Rows[0]["AuthenticationType"];
                if (dt.Rows[0]["Description"] != DBNull.Value)
                    Description = (System.String)dt.Rows[0]["Description"];
                if (dt.Rows[0]["DomainID"] != DBNull.Value)
                    DomainID = (System.Byte)dt.Rows[0]["DomainID"];
                if (dt.Rows[0]["LoginType"] != DBNull.Value)
                    LoginType = (System.Byte)dt.Rows[0]["LoginType"];
                if (dt.Rows[0]["CanLogin"] != DBNull.Value)
                    CanLogin = (System.Boolean)dt.Rows[0]["CanLogin"];
                if (dt.Rows[0]["IsEntered"] != DBNull.Value)
                    IsEntered = (System.Boolean)dt.Rows[0]["IsEntered"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["IsAdmin"] != DBNull.Value)
                    IsAdmin = (System.Boolean)dt.Rows[0]["IsAdmin"];
                if (dt.Rows[0]["IsSysAdmin"] != DBNull.Value)
                    IsSysAdmin = (System.Boolean)dt.Rows[0]["IsSysAdmin"];
                if (dt.Rows[0]["IsManager"] != DBNull.Value)
                    IsManager = (System.Boolean)dt.Rows[0]["IsManager"];
                if (dt.Rows[0]["IsSupervisor"] != DBNull.Value)
                    IsSupervisor = (System.Boolean)dt.Rows[0]["IsSupervisor"];
                if (dt.Rows[0]["IsExpert"] != DBNull.Value)
                    IsExpert = (System.Boolean)dt.Rows[0]["IsExpert"];
                if (dt.Rows[0]["IsOperator"] != DBNull.Value)
                    IsOperator = (System.Boolean)dt.Rows[0]["IsOperator"];
                if (dt.Rows[0]["IsSpecialUser"] != DBNull.Value)
                    IsSpecialUser = (System.Boolean)dt.Rows[0]["IsSpecialUser"];
                if (dt.Rows[0]["GetUrgentRequest"] != DBNull.Value)
                    GetUrgentRequest = (System.Boolean)dt.Rows[0]["GetUrgentRequest"];
                if (dt.Rows[0]["MessageSignature"] != DBNull.Value)
                    MessageSignature = (System.String)dt.Rows[0]["MessageSignature"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                    InsUserID = (System.Int32)dt.Rows[0]["InsUserID"];
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                    EditUserID = (System.Int32)dt.Rows[0]["EditUserID"];
                if (dt.Rows[0]["SysDateTime"] != DBNull.Value)
                    SysDateTime = (System.DateTime)dt.Rows[0]["SysDateTime"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo()
        {
            OpenConnection();
            DataTable dt = new DataTable(); string strSQL = "";
            strSQL = "select * from [User] WHERE [UserID]=@UserID";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@UserID", this.UserID));
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                    UserID = (System.Int32)dt.Rows[0]["UserID"];
                if (dt.Rows[0]["FullName"] != DBNull.Value)
                    FullName = (System.String)dt.Rows[0]["FullName"];
                if (dt.Rows[0]["UserName"] != DBNull.Value)
                    UserName = (System.String)dt.Rows[0]["UserName"];
                if (dt.Rows[0]["Password"] != DBNull.Value)
                    Password = (System.String)dt.Rows[0]["Password"];
                if (dt.Rows[0]["Last"] != DBNull.Value)
                    Last = (System.String)dt.Rows[0]["Last"];
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["AuthenticationType"] != DBNull.Value)
                    AuthenticationType = (System.Byte)dt.Rows[0]["AuthenticationType"];
                if (dt.Rows[0]["Description"] != DBNull.Value)
                    Description = (System.String)dt.Rows[0]["Description"];
                if (dt.Rows[0]["DomainID"] != DBNull.Value)
                    DomainID = (System.Byte)dt.Rows[0]["DomainID"];
                if (dt.Rows[0]["LoginType"] != DBNull.Value)
                    LoginType = (System.Byte)dt.Rows[0]["LoginType"];
                if (dt.Rows[0]["CanLogin"] != DBNull.Value)
                    CanLogin = (System.Boolean)dt.Rows[0]["CanLogin"];
                if (dt.Rows[0]["IsEntered"] != DBNull.Value)
                    IsEntered = (System.Boolean)dt.Rows[0]["IsEntered"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["IsAdmin"] != DBNull.Value)
                    IsAdmin = (System.Boolean)dt.Rows[0]["IsAdmin"];
                if (dt.Rows[0]["IsSysAdmin"] != DBNull.Value)
                    IsSysAdmin = (System.Boolean)dt.Rows[0]["IsSysAdmin"];
                if (dt.Rows[0]["IsManager"] != DBNull.Value)
                    IsManager = (System.Boolean)dt.Rows[0]["IsManager"];
                if (dt.Rows[0]["IsSupervisor"] != DBNull.Value)
                    IsSupervisor = (System.Boolean)dt.Rows[0]["IsSupervisor"];
                if (dt.Rows[0]["IsExpert"] != DBNull.Value)
                    IsExpert = (System.Boolean)dt.Rows[0]["IsExpert"];
                if (dt.Rows[0]["IsOperator"] != DBNull.Value)
                    IsOperator = (System.Boolean)dt.Rows[0]["IsOperator"];
                if (dt.Rows[0]["IsSpecialUser"] != DBNull.Value)
                    IsSpecialUser = (System.Boolean)dt.Rows[0]["IsSpecialUser"];
                if (dt.Rows[0]["GetUrgentRequest"] != DBNull.Value)
                    GetUrgentRequest = (System.Boolean)dt.Rows[0]["GetUrgentRequest"];
                if (dt.Rows[0]["MessageSignature"] != DBNull.Value)
                    MessageSignature = (System.String)dt.Rows[0]["MessageSignature"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                    InsUserID = (System.Int32)dt.Rows[0]["InsUserID"];
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                    EditUserID = (System.Int32)dt.Rows[0]["EditUserID"];
                if (dt.Rows[0]["SysDateTime"] != DBNull.Value)
                    SysDateTime = (System.DateTime)dt.Rows[0]["SysDateTime"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo_OLD(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                        sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                    else
                        sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "' and ";
                else
                if (!(FieldValues[fieldNames[i]].GetType().ToString() == "System.Boolean"))
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + ((bool)FieldValues[fieldNames[i]] ? "1" : "0") + "'";
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [User] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                    UserID = (System.Int32)dt.Rows[0]["UserID"];
                if (dt.Rows[0]["FullName"] != DBNull.Value)
                    FullName = (System.String)dt.Rows[0]["FullName"];
                if (dt.Rows[0]["UserName"] != DBNull.Value)
                    UserName = (System.String)dt.Rows[0]["UserName"];
                if (dt.Rows[0]["Password"] != DBNull.Value)
                    Password = (System.String)dt.Rows[0]["Password"];
                if (dt.Rows[0]["Last"] != DBNull.Value)
                    Last = (System.String)dt.Rows[0]["Last"];
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["AuthenticationType"] != DBNull.Value)
                    AuthenticationType = (System.Byte)dt.Rows[0]["AuthenticationType"];
                if (dt.Rows[0]["Description"] != DBNull.Value)
                    Description = (System.String)dt.Rows[0]["Description"];
                if (dt.Rows[0]["DomainID"] != DBNull.Value)
                    DomainID = (System.Byte)dt.Rows[0]["DomainID"];
                if (dt.Rows[0]["LoginType"] != DBNull.Value)
                    LoginType = (System.Byte)dt.Rows[0]["LoginType"];
                if (dt.Rows[0]["CanLogin"] != DBNull.Value)
                    CanLogin = (System.Boolean)dt.Rows[0]["CanLogin"];
                if (dt.Rows[0]["IsEntered"] != DBNull.Value)
                    IsEntered = (System.Boolean)dt.Rows[0]["IsEntered"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["IsAdmin"] != DBNull.Value)
                    IsAdmin = (System.Boolean)dt.Rows[0]["IsAdmin"];
                if (dt.Rows[0]["IsSysAdmin"] != DBNull.Value)
                    IsSysAdmin = (System.Boolean)dt.Rows[0]["IsSysAdmin"];
                if (dt.Rows[0]["IsManager"] != DBNull.Value)
                    IsManager = (System.Boolean)dt.Rows[0]["IsManager"];
                if (dt.Rows[0]["IsSupervisor"] != DBNull.Value)
                    IsSupervisor = (System.Boolean)dt.Rows[0]["IsSupervisor"];
                if (dt.Rows[0]["IsExpert"] != DBNull.Value)
                    IsExpert = (System.Boolean)dt.Rows[0]["IsExpert"];
                if (dt.Rows[0]["IsOperator"] != DBNull.Value)
                    IsOperator = (System.Boolean)dt.Rows[0]["IsOperator"];
                if (dt.Rows[0]["IsSpecialUser"] != DBNull.Value)
                    IsSpecialUser = (System.Boolean)dt.Rows[0]["IsSpecialUser"];
                if (dt.Rows[0]["GetUrgentRequest"] != DBNull.Value)
                    GetUrgentRequest = (System.Boolean)dt.Rows[0]["GetUrgentRequest"];
                if (dt.Rows[0]["MessageSignature"] != DBNull.Value)
                    MessageSignature = (System.String)dt.Rows[0]["MessageSignature"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                    InsUserID = (System.Int32)dt.Rows[0]["InsUserID"];
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                    EditUserID = (System.Int32)dt.Rows[0]["EditUserID"];
                if (dt.Rows[0]["SysDateTime"] != DBNull.Value)
                    SysDateTime = (System.DateTime)dt.Rows[0]["SysDateTime"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        ///اطلاعات يک رکورد خاص را برمي گرداند 
        /// </summary>
        public bool getInfo(params string[] fieldNames)
        {
            string sWhereFields = " where ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                sWhereFields += "[" + fieldNames[i] + "]=@" + fieldNames[i];
                sWhereFields += (i < fieldNames.Length - 1 ? " and" : "");
            }
            sqlCommand.Parameters.Clear();
            SqlParameter param;
            for (int i = 0; i < fieldNames.Length; i++)
            {
                param = new SqlParameter();
                param.ParameterName = "@" + fieldNames[i];
                param.Value = FieldValues[fieldNames[i]];
                sqlCommand.Parameters.Add(param);
            }
            OpenConnection();
            DataTable dt = new DataTable();
            string strSQL = "";
            strSQL = "select * from [User] " + sWhereFields;
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataAdapter.Fill(dt);
                if (dt.Rows.Count != 1) return false;
                if (dt.Rows[0]["UserID"] != DBNull.Value)
                    UserID = (System.Int32)dt.Rows[0]["UserID"];
                if (dt.Rows[0]["FullName"] != DBNull.Value)
                    FullName = (System.String)dt.Rows[0]["FullName"];
                if (dt.Rows[0]["UserName"] != DBNull.Value)
                    UserName = (System.String)dt.Rows[0]["UserName"];
                if (dt.Rows[0]["Password"] != DBNull.Value)
                    Password = (System.String)dt.Rows[0]["Password"];
                if (dt.Rows[0]["Last"] != DBNull.Value)
                    Last = (System.String)dt.Rows[0]["Last"];
                if (dt.Rows[0]["StationID"] != DBNull.Value)
                    StationID = (System.Int32)dt.Rows[0]["StationID"];
                if (dt.Rows[0]["AuthenticationType"] != DBNull.Value)
                    AuthenticationType = (System.Byte)dt.Rows[0]["AuthenticationType"];
                if (dt.Rows[0]["Description"] != DBNull.Value)
                    Description = (System.String)dt.Rows[0]["Description"];
                if (dt.Rows[0]["DomainID"] != DBNull.Value)
                    DomainID = (System.Byte)dt.Rows[0]["DomainID"];
                if (dt.Rows[0]["LoginType"] != DBNull.Value)
                    LoginType = (System.Byte)dt.Rows[0]["LoginType"];
                if (dt.Rows[0]["CanLogin"] != DBNull.Value)
                    CanLogin = (System.Boolean)dt.Rows[0]["CanLogin"];
                if (dt.Rows[0]["IsEntered"] != DBNull.Value)
                    IsEntered = (System.Boolean)dt.Rows[0]["IsEntered"];
                if (dt.Rows[0]["IsActive"] != DBNull.Value)
                    IsActive = (System.Boolean)dt.Rows[0]["IsActive"];
                if (dt.Rows[0]["IsAdmin"] != DBNull.Value)
                    IsAdmin = (System.Boolean)dt.Rows[0]["IsAdmin"];
                if (dt.Rows[0]["IsSysAdmin"] != DBNull.Value)
                    IsSysAdmin = (System.Boolean)dt.Rows[0]["IsSysAdmin"];
                if (dt.Rows[0]["IsManager"] != DBNull.Value)
                    IsManager = (System.Boolean)dt.Rows[0]["IsManager"];
                if (dt.Rows[0]["IsSupervisor"] != DBNull.Value)
                    IsSupervisor = (System.Boolean)dt.Rows[0]["IsSupervisor"];
                if (dt.Rows[0]["IsExpert"] != DBNull.Value)
                    IsExpert = (System.Boolean)dt.Rows[0]["IsExpert"];
                if (dt.Rows[0]["IsOperator"] != DBNull.Value)
                    IsOperator = (System.Boolean)dt.Rows[0]["IsOperator"];
                if (dt.Rows[0]["IsSpecialUser"] != DBNull.Value)
                    IsSpecialUser = (System.Boolean)dt.Rows[0]["IsSpecialUser"];
                if (dt.Rows[0]["GetUrgentRequest"] != DBNull.Value)
                    GetUrgentRequest = (System.Boolean)dt.Rows[0]["GetUrgentRequest"];
                if (dt.Rows[0]["MessageSignature"] != DBNull.Value)
                    MessageSignature = (System.String)dt.Rows[0]["MessageSignature"];
                if (dt.Rows[0]["InsDate"] != DBNull.Value)
                    InsDate = (System.String)dt.Rows[0]["InsDate"];
                if (dt.Rows[0]["InsTime"] != DBNull.Value)
                    InsTime = (System.String)dt.Rows[0]["InsTime"];
                if (dt.Rows[0]["InsUserID"] != DBNull.Value)
                    InsUserID = (System.Int32)dt.Rows[0]["InsUserID"];
                if (dt.Rows[0]["EditDate"] != DBNull.Value)
                    EditDate = (System.String)dt.Rows[0]["EditDate"];
                if (dt.Rows[0]["EditTime"] != DBNull.Value)
                    EditTime = (System.String)dt.Rows[0]["EditTime"];
                if (dt.Rows[0]["EditUserID"] != DBNull.Value)
                    EditUserID = (System.Int32)dt.Rows[0]["EditUserID"];
                if (dt.Rows[0]["SysDateTime"] != DBNull.Value)
                    SysDateTime = (System.DateTime)dt.Rows[0]["SysDateTime"];
                if (dt.Rows[0]["RowTime"] != DBNull.Value)
                    RowTime = (System.Byte[])dt.Rows[0]["RowTime"];
                shouldLoad = false;
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }

        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_OldADO()
        {
            string strSQL = "";
            strSQL = "update [User] set " +
            "[FullName]=N'" + mFullName.ToString() + "'," +
            "[UserName]=N'" + mUserName.ToString() + "'," +
            "[Password]=N'" + mPassword.ToString() + "'," +
            "[Last]=N'" + mLast.ToString() + "'," +
            "[StationID]=" + mStationID.ToString() + "," +
            "[AuthenticationType]=" + mAuthenticationType.ToString() + "," +
            "[Description]=N'" + mDescription.ToString() + "'," +
            "[DomainID]=" + mDomainID.ToString() + "," +
            "[LoginType]=" + mLoginType.ToString() + "," +
            "[CanLogin]=" + (CanLogin ? "1" : "0") + "," +
            "[IsEntered]=" + (IsEntered ? "1" : "0") + "," +
            "[IsActive]=" + (IsActive ? "1" : "0") + "," +
            "[IsAdmin]=" + (IsAdmin ? "1" : "0") + "," +
            "[IsSysAdmin]=" + (IsSysAdmin ? "1" : "0") + "," +
            "[IsManager]=" + (IsManager ? "1" : "0") + "," +
            "[IsSupervisor]=" + (IsSupervisor ? "1" : "0") + "," +
            "[IsExpert]=" + (IsExpert ? "1" : "0") + "," +
            "[IsOperator]=" + (IsOperator ? "1" : "0") + "," +
            "[IsSpecialUser]=" + (IsSpecialUser ? "1" : "0") + "," +
            "[GetUrgentRequest]=" + (GetUrgentRequest ? "1" : "0") + "," +
            "[MessageSignature]=N'" + mMessageSignature.ToString() + "'," +
            "[InsDate]=N'" + mInsDate.ToString() + "'," +
            "[InsTime]=N'" + mInsTime.ToString() + "'," +
            "[InsUserID]=" + mInsUserID.ToString() + "," +
            "[EditDate]=N'" + mEditDate.ToString() + "'," +
            "[EditTime]=N'" + mEditTime.ToString() + "'," +
            "[EditUserID]=" + mEditUserID.ToString() + "," +
            "[SysDateTime]=N'" + mSysDateTime.ToString() + "'"
            ;
            strSQL += "  where [UserID] ='" + this.UserID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool Update()
        {
            string strSQL = "";
            strSQL = "update [User] set FullName=@FullName,UserName=@UserName,Password=@Password,Last=@Last,StationID=@StationID,AuthenticationType=@AuthenticationType,Description=@Description,DomainID=@DomainID,LoginType=@LoginType,CanLogin=@CanLogin,IsEntered=@IsEntered,IsActive=@IsActive,IsAdmin=@IsAdmin,IsSysAdmin=@IsSysAdmin,IsManager=@IsManager,IsSupervisor=@IsSupervisor,IsExpert=@IsExpert,IsOperator=@IsOperator,IsSpecialUser=@IsSpecialUser,GetUrgentRequest=@GetUrgentRequest,MessageSignature=@MessageSignature,InsDate=@InsDate,InsTime=@InsTime,InsUserID=@InsUserID,EditDate=@EditDate,EditTime=@EditTime,EditUserID=@EditUserID,SysDateTime=@SysDateTime";
            strSQL += " WHERE [UserID]=@UserID ";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@FullName", SqlDbType.NVarChar).Value = mFullName == null ? (Object)DBNull.Value : mFullName;
            sqlCommand.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = mUserName == null ? (Object)DBNull.Value : mUserName;
            sqlCommand.Parameters.Add("@Password", SqlDbType.NVarChar).Value = mPassword == null ? (Object)DBNull.Value : mPassword;
            sqlCommand.Parameters.Add("@Last", SqlDbType.NVarChar).Value = mLast == null ? (Object)DBNull.Value : mLast;
            sqlCommand.Parameters.Add("@StationID", SqlDbType.Int).Value = mStationID;
            sqlCommand.Parameters.Add("@AuthenticationType", SqlDbType.SmallInt).Value = mAuthenticationType;
            sqlCommand.Parameters.Add("@Description", SqlDbType.NVarChar).Value = mDescription == null ? (Object)DBNull.Value : mDescription;
            sqlCommand.Parameters.Add("@DomainID", SqlDbType.TinyInt).Value = mDomainID;
            sqlCommand.Parameters.Add("@LoginType", SqlDbType.TinyInt).Value = mLoginType;
            sqlCommand.Parameters.Add("@CanLogin", SqlDbType.Bit).Value = mCanLogin ? true : false;
            sqlCommand.Parameters.Add("@IsEntered", SqlDbType.Bit).Value = mIsEntered ? true : false;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            sqlCommand.Parameters.Add("@IsAdmin", SqlDbType.Bit).Value = mIsAdmin ? true : false;
            sqlCommand.Parameters.Add("@IsSysAdmin", SqlDbType.Bit).Value = mIsSysAdmin ? true : false;
            sqlCommand.Parameters.Add("@IsManager", SqlDbType.Bit).Value = mIsManager ? true : false;
            sqlCommand.Parameters.Add("@IsSupervisor", SqlDbType.Bit).Value = mIsSupervisor ? true : false;
            sqlCommand.Parameters.Add("@IsExpert", SqlDbType.Bit).Value = mIsExpert ? true : false;
            sqlCommand.Parameters.Add("@IsOperator", SqlDbType.Bit).Value = mIsOperator ? true : false;
            sqlCommand.Parameters.Add("@IsSpecialUser", SqlDbType.Bit).Value = mIsSpecialUser ? true : false;
            sqlCommand.Parameters.Add("@GetUrgentRequest", SqlDbType.Bit).Value = mGetUrgentRequest ? true : false;
            sqlCommand.Parameters.Add("@MessageSignature", SqlDbType.NVarChar).Value = mMessageSignature == null ? (Object)DBNull.Value : mMessageSignature;
            sqlCommand.Parameters.Add("@InsDate", SqlDbType.NVarChar).Value = mInsDate == null ? (Object)DBNull.Value : mInsDate;
            sqlCommand.Parameters.Add("@InsTime", SqlDbType.NVarChar).Value = mInsTime == null ? (Object)DBNull.Value : mInsTime;
            sqlCommand.Parameters.Add("@InsUserID", SqlDbType.Int).Value = mInsUserID;
            sqlCommand.Parameters.Add("@EditDate", SqlDbType.NVarChar).Value = mEditDate == null ? (Object)DBNull.Value : mEditDate;
            sqlCommand.Parameters.Add("@EditTime", SqlDbType.NVarChar).Value = mEditTime == null ? (Object)DBNull.Value : mEditTime;
            sqlCommand.Parameters.Add("@EditUserID", SqlDbType.Int).Value = mEditUserID;
            sqlCommand.Parameters.Add("@SysDateTime", SqlDbType.DateTime).Value = mSysDateTime == DateTime.MinValue ? (Object)DBNull.Value : mSysDateTime;
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را ويرايش مي کند
        /// </summary>
        public bool update_OldADO(System.Int32 UserID)
        {
            string strSQL = "";
            strSQL = "update [User] set " +
            "[FullName]=N'" + mFullName.ToString() + "'," +
            "[UserName]=N'" + mUserName.ToString() + "'," +
            "[Password]=N'" + mPassword.ToString() + "'," +
            "[Last]=N'" + mLast.ToString() + "'," +
            "[StationID]=" + mStationID.ToString() + "," +
            "[AuthenticationType]=" + mAuthenticationType.ToString() + "," +
            "[Description]=N'" + mDescription.ToString() + "'," +
            "[DomainID]=" + mDomainID.ToString() + "," +
            "[LoginType]=" + mLoginType.ToString() + "," +
            "[CanLogin]=" + (mCanLogin ? "1" : "0") + "," +
            "[IsEntered]=" + (mIsEntered ? "1" : "0") + "," +
            "[IsActive]=" + (mIsActive ? "1" : "0") + "," +
            "[IsAdmin]=" + (mIsAdmin ? "1" : "0") + "," +
            "[IsSysAdmin]=" + (mIsSysAdmin ? "1" : "0") + "," +
            "[IsManager]=" + (mIsManager ? "1" : "0") + "," +
            "[IsSupervisor]=" + (mIsSupervisor ? "1" : "0") + "," +
            "[IsExpert]=" + (mIsExpert ? "1" : "0") + "," +
            "[IsOperator]=" + (mIsOperator ? "1" : "0") + "," +
            "[IsSpecialUser]=" + (mIsSpecialUser ? "1" : "0") + "," +
            "[GetUrgentRequest]=" + (mGetUrgentRequest ? "1" : "0") + "," +
            "[MessageSignature]=N'" + mMessageSignature.ToString() + "'," +
            "[InsDate]=N'" + mInsDate.ToString() + "'," +
            "[InsTime]=N'" + mInsTime.ToString() + "'," +
            "[InsUserID]=" + mInsUserID.ToString() + "," +
            "[EditDate]=N'" + mEditDate.ToString() + "'," +
            "[EditTime]=N'" + mEditTime.ToString() + "'," +
            "[EditUserID]=" + mEditUserID.ToString() + "," +
            "[SysDateTime]=N'" + mSysDateTime.ToString() + "'"
            ;
            strSQL += "   where [UserID] ='" + this.UserID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool Delete_OldADO()
        {
            string strSQL = "";
            strSQL = "delete from [User]  where [UserID] ='" + this.UserID.ToString() + "'";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool Delete()
        {
            string strSQL = "";
            strSQL = "delete from [User] WHERE [UserID]=@UserID";
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@UserID", this.UserID));
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد خاص را حذف مي کند 
        /// </summary>
        public bool delete(params string[] fieldNames)
        {
            if (!this.getInfo(fieldNames)) return false;
            string sWhereFields = "  ";
            for (int i = 0; i < fieldNames.Length; i++)
            {
                if (i != fieldNames.Length - 1)
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "' and ";
                else
                    sWhereFields += "[" + fieldNames[i] + "]='" + (FieldValues[fieldNames[i]]).ToString() + "'";
            }
            string strSQL = "";
            strSQL = "delete from [User] where " + sWhereFields;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            sqlCommand.CommandText = strSQL;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }

        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void Append_OldADO()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [User] ([FullName],[UserName],[Password],[Last],[StationID],[AuthenticationType],[Description],[DomainID],[LoginType],[CanLogin],[IsEntered],[IsActive],[IsAdmin],[IsSysAdmin],[IsManager],[IsSupervisor],[IsExpert],[IsOperator],[IsSpecialUser],[GetUrgentRequest],[MessageSignature],[InsDate],[InsTime],[InsUserID],[EditDate],[EditTime],[EditUserID],[SysDateTime])" +
            "values (" +
            "N'" + mFullName.ToString() + "'" + "," +
            "N'" + mUserName.ToString() + "'" + "," +
            "N'" + mPassword.ToString() + "'" + "," +
            "N'" + mLast.ToString() + "'" + "," +
            "" + mStationID.ToString() + "," +
            "" + mAuthenticationType.ToString() + "," +
            "N'" + mDescription.ToString() + "'" + "," +
            "" + mDomainID.ToString() + "," +
            "" + mLoginType.ToString() + "," +
            (mCanLogin ? "1" : "0") + "," +
            (mIsEntered ? "1" : "0") + "," +
            (mIsActive ? "1" : "0") + "," +
            (mIsAdmin ? "1" : "0") + "," +
            (mIsSysAdmin ? "1" : "0") + "," +
            (mIsManager ? "1" : "0") + "," +
            (mIsSupervisor ? "1" : "0") + "," +
            (mIsExpert ? "1" : "0") + "," +
            (mIsOperator ? "1" : "0") + "," +
            (mIsSpecialUser ? "1" : "0") + "," +
            (mGetUrgentRequest ? "1" : "0") + "," +
            "N'" + mMessageSignature.ToString() + "'" + "," +
            "N'" + mInsDate.ToString() + "'" + "," +
            "N'" + mInsTime.ToString() + "'" + "," +
            "" + mInsUserID.ToString() + "," +
            "N'" + mEditDate.ToString() + "'" + "," +
            "N'" + mEditTime.ToString() + "'" + "," +
            "" + mEditUserID.ToString() + "," +
            "N'" + mSysDateTime.ToString() + "'" +
            ")";
            strSQL += " SELECT @@IDENTITY"; OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                if (ret != null)
                    UserID = System.Int32.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        /// <summary>
        /// يک رکورد را به جدول اضافه مي کند 
        /// </summary>
        public void Append()
        {
            string strSQL = "";
            sqlCommand.Parameters.Clear();
            strSQL = @"insert into  [User] ([FullName],[UserName],[Password],[Last],[StationID],[AuthenticationType],[Description],[DomainID],[LoginType],[CanLogin],[IsEntered],[IsActive],[IsAdmin],[IsSysAdmin],[IsManager],[IsSupervisor],[IsExpert],[IsOperator],[IsSpecialUser],[GetUrgentRequest],[MessageSignature],[InsDate],[InsTime],[InsUserID],[EditDate],[EditTime],[EditUserID],[SysDateTime])" +
            "values (@FullName, @UserName, @Password, @Last, @StationID, @AuthenticationType, @Description, @DomainID, @LoginType, @CanLogin, @IsEntered, @IsActive, @IsAdmin, @IsSysAdmin, @IsManager, @IsSupervisor, @IsExpert, @IsOperator, @IsSpecialUser, @GetUrgentRequest, @MessageSignature, @InsDate, @InsTime, @InsUserID, @EditDate, @EditTime, @EditUserID, @SysDateTime )";
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add("@FullName", SqlDbType.NVarChar).Value = mFullName == null ? (Object)DBNull.Value : mFullName;
            sqlCommand.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = mUserName == null ? (Object)DBNull.Value : mUserName;
            sqlCommand.Parameters.Add("@Password", SqlDbType.NVarChar).Value = mPassword == null ? (Object)DBNull.Value : mPassword;
            sqlCommand.Parameters.Add("@Last", SqlDbType.NVarChar).Value = mLast == null ? (Object)DBNull.Value : mLast;
            sqlCommand.Parameters.Add("@StationID", SqlDbType.Int).Value = mStationID;
            sqlCommand.Parameters.Add("@AuthenticationType", SqlDbType.SmallInt).Value = mAuthenticationType;
            sqlCommand.Parameters.Add("@Description", SqlDbType.NVarChar).Value = mDescription == null ? (Object)DBNull.Value : mDescription;
            sqlCommand.Parameters.Add("@DomainID", SqlDbType.TinyInt).Value = mDomainID;
            sqlCommand.Parameters.Add("@LoginType", SqlDbType.TinyInt).Value = mLoginType;
            sqlCommand.Parameters.Add("@CanLogin", SqlDbType.Bit).Value = mCanLogin ? true : false;
            sqlCommand.Parameters.Add("@IsEntered", SqlDbType.Bit).Value = mIsEntered ? true : false;
            sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit).Value = mIsActive ? true : false;
            sqlCommand.Parameters.Add("@IsAdmin", SqlDbType.Bit).Value = mIsAdmin ? true : false;
            sqlCommand.Parameters.Add("@IsSysAdmin", SqlDbType.Bit).Value = mIsSysAdmin ? true : false;
            sqlCommand.Parameters.Add("@IsManager", SqlDbType.Bit).Value = mIsManager ? true : false;
            sqlCommand.Parameters.Add("@IsSupervisor", SqlDbType.Bit).Value = mIsSupervisor ? true : false;
            sqlCommand.Parameters.Add("@IsExpert", SqlDbType.Bit).Value = mIsExpert ? true : false;
            sqlCommand.Parameters.Add("@IsOperator", SqlDbType.Bit).Value = mIsOperator ? true : false;
            sqlCommand.Parameters.Add("@IsSpecialUser", SqlDbType.Bit).Value = mIsSpecialUser ? true : false;
            sqlCommand.Parameters.Add("@GetUrgentRequest", SqlDbType.Bit).Value = mGetUrgentRequest ? true : false;
            sqlCommand.Parameters.Add("@MessageSignature", SqlDbType.NVarChar).Value = mMessageSignature == null ? (Object)DBNull.Value : mMessageSignature;
            sqlCommand.Parameters.Add("@InsDate", SqlDbType.NVarChar).Value = mInsDate == null ? (Object)DBNull.Value : mInsDate;
            sqlCommand.Parameters.Add("@InsTime", SqlDbType.NVarChar).Value = mInsTime == null ? (Object)DBNull.Value : mInsTime;
            sqlCommand.Parameters.Add("@InsUserID", SqlDbType.Int).Value = mInsUserID;
            sqlCommand.Parameters.Add("@EditDate", SqlDbType.NVarChar).Value = mEditDate == null ? (Object)DBNull.Value : mEditDate;
            sqlCommand.Parameters.Add("@EditTime", SqlDbType.NVarChar).Value = mEditTime == null ? (Object)DBNull.Value : mEditTime;
            sqlCommand.Parameters.Add("@EditUserID", SqlDbType.Int).Value = mEditUserID;
            sqlCommand.Parameters.Add("@SysDateTime", SqlDbType.DateTime).Value = mSysDateTime == DateTime.MinValue ? (Object)DBNull.Value : mSysDateTime;
            strSQL += " SELECT @@IDENTITY";
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                if (ret != null)
                    UserID = System.Int32.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }
        public int getOrdinal(string whereExpression, string sortExpression)
        {
            string strSQL = "";
            strSQL = "select [UserID] from [User]" +
            (whereExpression == "" ? "" : " where " + whereExpression) +
            (sortExpression == "" ? "" : " order by " + sortExpression);
            OpenConnection();
            sqlCommand.CommandText = strSQL;
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlDataReader = sqlCommand.ExecuteReader();
                int index = 0;
                bool found = false;
                while (sqlDataReader.Read())
                {
                    if ((System.Int32)sqlDataReader["UserID"] == UserID)
                    {
                        found = true;
                        break;
                    }
                    index++;
                }
                sqlDataReader.Close();
                if (transaction == null) CloseConnection();
                if (found) return index; else return -1; ;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>
        public StationsDL[] getStationsEditUserID()
        {

            return StationsDL.getInstances(" [EditUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        public DataTable getStationsEditUserIDDT()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationsDL.getRecords("", " [EditUserID]='" + this.UserID.ToString() + "'", "", transaction);
        }
        /// <summary>		
        /// اين تابع تعداد ركوردهاي متناظر اين شي از جدول ارجاعي را  بر مي گرداند
        /// </summary>
        public long getStationsEditUserIDCount()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationsDL.count(" [EditUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>
        public StationsDL[] getStationsInsUserID()
        {

            return StationsDL.getInstances(" [InsUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        public DataTable getStationsInsUserIDDT()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationsDL.getRecords("", " [InsUserID]='" + this.UserID.ToString() + "'", "", transaction);
        }
        /// <summary>		
        /// اين تابع تعداد ركوردهاي متناظر اين شي از جدول ارجاعي را  بر مي گرداند
        /// </summary>
        public long getStationsInsUserIDCount()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationsDL.count(" [InsUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>
        public StationTypeDL[] getStationTypeEditUserID()
        {

            return StationTypeDL.getInstances(" [EditUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        public DataTable getStationTypeEditUserIDDT()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationTypeDL.getRecords("", " [EditUserID]='" + this.UserID.ToString() + "'", "", transaction);
        }
        /// <summary>		
        /// اين تابع تعداد ركوردهاي متناظر اين شي از جدول ارجاعي را  بر مي گرداند
        /// </summary>
        public long getStationTypeEditUserIDCount()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationTypeDL.count(" [EditUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>
        public StationTypeDL[] getStationTypeInsUserID()
        {

            return StationTypeDL.getInstances(" [InsUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        public DataTable getStationTypeInsUserIDDT()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationTypeDL.getRecords("", " [InsUserID]='" + this.UserID.ToString() + "'", "", transaction);
        }
        /// <summary>		
        /// اين تابع تعداد ركوردهاي متناظر اين شي از جدول ارجاعي را  بر مي گرداند
        /// </summary>
        public long getStationTypeInsUserIDCount()
        {
            if (transaction == null) throw new Exception("Transaction value not set to an instance of Transaction class");

            return StationTypeDL.count(" [InsUserID]='" + this.UserID.ToString() + "'", transaction);
        }
        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>

        /// <summary>		
        /// اين تابع تمام ركوردهاي متناظر اين شي از جدول ارجاعي را در قالب ارايه از كلاس داده آن جدول بر مي گرداند
        /// </summary>


        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [User] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [User]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// يكي از توابع تجمعي روي مجموعه اي از ركوردها اعمال ميكند 
        /// </summary>
        public static object aggregate(AggregateType type, string fieldName, string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select {0} ({1}) from [User] where {2}",
                                    type.ToString(),
                                    fieldName == "" ? "*" : fieldName,
                                    whereExpression);
            else
                strSQL = string.Format("select {0} ({1}) from [User]",
                    type.ToString(),
                    fieldName == "" ? "*" : fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [User] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [User]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [User] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با شرايط داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("select count(*)  from [User] where {0}",
                    whereExpression);
            else
                strSQL = string.Format("select count(*)  from [User]");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>
        /// تعداد ركوردهاي متناظر با مقدار فیلد داده شده را بر مي گرداند 
        /// </summary>
        public static long count(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select count(*)  from [User] where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                object ret = sqlCommand.ExecuteScalar();
                return ret == null || ret == DBNull.Value ? 0 : long.Parse(ret.ToString());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [User] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [User] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 
        /// اين تابع مجموعه اي از ركوردها را ويرايش مي كند و تعداد ركورد ويرايش شده را برمي گرداند
        /// </summary>
        public static long updateRecords(string whereExpression, string setExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("update [User] set {0}   where {1}",
                    setExpression,
                    whereExpression);
            else
                strSQL = string.Format("update [User] set {0}   ",
                    setExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [User]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [User]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("delete from [User]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            if (whereExpression != "")
                strSQL = string.Format("delete from [User]   where {0}",
                    whereExpression);
            else
                strSQL = string.Format("delete from [User]  ");
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary>		
        /// اين تابع مجموعه اي از ركوردها را حذف مي كند و تعداد ركوردهاي حذف شده برگرداننده مي شود
        /// </summary>
        public static long deleteRecords(string fieldName, string fieldValue, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("delete from [User]   where {0}=@param", fieldName);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try
                {
                    sqlConnection.Open();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            sqlCommand.Parameters.Clear();
            sqlCommand.Parameters.Add(new SqlParameter("@param", fieldValue));
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                return sqlCommand.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }

        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecords(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid(string selectExpression, string whereExpression,
            string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 	
        /// مجموعه اي از ركوردهاي جدول در قالب جدول داده بر مي گرداند
        /// </summary>
        public static DataTable getRecordsForGrid_SQL(string selectExpression, string whereExpression,
            string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select {0} from [User]  {1}  {2}",
                    selectExpression == "" ? "*" : selectExpression,
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : " order by " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                return DS.Tables[0];

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, int startIndex, int maxRecords)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL();
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                }
                return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, int startIndex, int maxRecords, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, startIndex, maxRecords, "User");
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL(transaction);
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                }
                return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL();
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                }
                return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0}  ",
                whereExpression == "" ? "" : "where " + whereExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL(transaction);
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                }
                return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, string sortExpression)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlCommand sqlCommand = b.sqlCommand;
            SqlTransaction sqlTransaction = b.sqlTransaction;
            SqlConnection sqlConnection = b.sqlConnection;
            SqlDataAdapter sqlDataAdapter = b.sqlDataAdapter;
            SqlDataReader sqlDataReader = b.sqlDataReader;
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL();
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                }
                return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        /// <summary> 		
        /// مجموعه اي از ركوردهاي جدول در قالب آرايه اي از كلاس داده بر مي گرداند
        /// </summary>
        public static UserDL[] getInstances(string whereExpression, string sortExpression, Transaction transaction)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = transaction.sqlTransaction.Connection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            sqlCommand.Transaction = transaction.sqlTransaction;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format("select * from [User]  {0} {1} ",
                whereExpression == "" ? "" : "where " + whereExpression,
                sortExpression == "" ? "" : "ORDER BY " + sortExpression);
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); } catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS);
                UserDL[] UserDLs = new UserDL[DS.Tables[0].Rows.Count];
                int i = 0;
                foreach (DataRow row in DS.Tables[0].Rows)
                {
                    UserDLs[i] = new UserDL(transaction);
                    if (row["UserID"] != DBNull.Value)
                        UserDLs[i].UserID = (System.Int32)row["UserID"];

                    UserDLs[i].getInfo();
                    i++;
                }
                return UserDLs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) sqlConnection.Close();
            }
        }

        #endregion public methods 
        #region Constructors
        public UserDL()
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            

        }
        public UserDL(System.Int32 UserID)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            
            this.UserID = UserID;

        }
        public UserDL(Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            

            this.transaction = transaction;

        }
        public UserDL(System.Int32 UserID, Transaction transaction)
        {

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            
            this.UserID = UserID;

            this.transaction = transaction;

        }
        internal UserDL(BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            

        }
        internal UserDL(System.Int32 UserID, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            
            this.UserID = UserID;

        }
        internal UserDL(Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            

            this.transaction = transaction;

        }
        internal UserDL(System.Int32 UserID, Transaction transaction, BaseDataAccessLayerClass parent)
        {
            Parent = parent;

            FieldValues = new Hashtable();
            FieldValues.Add("UserID", null);
            FieldValues.Add("FullName", null);
            FieldValues.Add("UserName", null);
            FieldValues.Add("Password", null);
            FieldValues.Add("Last", null);
            FieldValues.Add("StationID", null);
            FieldValues.Add("AuthenticationType", null);
            FieldValues.Add("Description", null);
            FieldValues.Add("DomainID", null);
            FieldValues.Add("LoginType", null);
            FieldValues.Add("CanLogin", null);
            FieldValues.Add("IsEntered", null);
            FieldValues.Add("IsActive", null);
            FieldValues.Add("IsAdmin", null);
            FieldValues.Add("IsSysAdmin", null);
            FieldValues.Add("IsManager", null);
            FieldValues.Add("IsSupervisor", null);
            FieldValues.Add("IsExpert", null);
            FieldValues.Add("IsOperator", null);
            FieldValues.Add("IsSpecialUser", null);
            FieldValues.Add("GetUrgentRequest", null);
            FieldValues.Add("MessageSignature", null);
            FieldValues.Add("InsDate", null);
            FieldValues.Add("InsTime", null);
            FieldValues.Add("InsUserID", null);
            FieldValues.Add("EditDate", null);
            FieldValues.Add("EditTime", null);
            FieldValues.Add("EditUserID", null);
            FieldValues.Add("SysDateTime", null);
            AuthenticationType = ((0));
            
            this.UserID = UserID;

            this.transaction = transaction;

        }

        #endregion Constructors
        #endregion Base properties and methods(generated by  CodeGenerator)

        public bool update_OLD()
        {
            string strSQL = "";
            strSQL = "update [User] set " +
            "[FullName]=N'" + mFullName.ToString() + "'," +
            "[UserName]=N'" + mUserName.ToString() + "'," +
            "[Password]=N'" + mPassword.ToString() + "'," +
            "[Last]=N'" + mLast.ToString() + "'," +
            "[DomainID]=" + "" + (mDomainID.IsNull() ? "Null" : mDomainID.ToString()) + "," +
            "[LoginType]=" + "'" + mLoginType.ToString() + "'," +
            "[Description]=N'" + mDescription.ToString() + "'," +
            "[CanLogin]=" + (CanLogin ? "1" : "0") + "," +
            "[IsEntered]=" + (IsEntered ? "1" : "0") + "," +
            "[IsActive]=" + (IsActive ? "1" : "0") + "," +
            "[IsAdmin]=" + (IsAdmin ? "1" : "0") + "," +
            "[IsSysAdmin]=" + (IsSysAdmin ? "1" : "0") + "," +
            "[IsManager]=" + (IsManager ? "1" : "0") + "," +
            "[IsSupervisor]=" + (IsSupervisor ? "1" : "0") + "," +
            "[IsExpert]=" + (IsExpert ? "1" : "0") + "," +
            "[IsSpecialUser]=" + (IsSpecialUser ? "1" : "0") + "," +
            "[MessageSignature]=N'" + mMessageSignature.ToString() + "',"+
            "[StationID]=" + mStationID.ToString() + "," +
            "[AuthenticationType]=" + mAuthenticationType.ToString() + "," +
            "[IsOperator]=" + (mIsOperator ? "1" : "0") + "," +
            "[GetUrgentRequest]=" + (mGetUrgentRequest ? "1" : "0") + "," +
            "[InsDate]=N'" + mInsDate.ToString() + "'," +
            "[InsTime]=N'" + mInsTime.ToString() + "'," +
            "[InsUserID]=" + mInsUserID.ToString() + "," +
            "[EditDate]=N'" + mEditDate.ToString() + "'," +
            "[EditTime]=N'" + mEditTime.ToString() + "'," +
            "[EditUserID]=" + mEditUserID.ToString() + ""
            ;
            strSQL += "  where [UserID] ='" + this.UserID.ToString() + "' ";
            sqlCommand.CommandText = strSQL;
            OpenConnection();
            sqlCommand.Parameters.Clear();
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                sqlCommand.ExecuteNonQuery();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (transaction == null) CloseConnection();
            }
        }


        #region For Authorization
        public static bool hasUserAccessToStation(int UserID, string StationID)
        {
            BaseDataAccessLayerClass b = new BaseDataAccessLayerClass();
            SqlConnection sqlConnection;
            sqlConnection = b.sqlConnection;
            SqlCommand sqlCommand = new Microsoft.Data.SqlClient.SqlCommand();
            sqlCommand.Connection = sqlConnection;
            SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
            string strSQL = "";
            strSQL = string.Format(@"SELECT     COUNT(*) AS Expr1
FROM         dbo.UserGroup INNER JOIN
                      dbo.Station INNER JOIN
                      dbo.UserGroupStation ON dbo.Station.StationID = dbo.UserGroupStation.StationID ON 
                      dbo.UserGroup.UserGroupID = dbo.UserGroupStation.UserGroupID INNER JOIN
                      dbo.UserGroupAssign ON dbo.UserGroup.UserGroupID = dbo.UserGroupAssign.UserGroupID INNER JOIN
                      dbo.[User] ON dbo.UserGroupAssign.UserID = dbo.[User].UserID
WHERE     (dbo.[User].UserID = '{0}') AND (dbo.Station.StationID = '{1}')", UserID.ToString(), StationID.ToString());
            sqlCommand.CommandText = strSQL;
            if (sqlConnection.State == ConnectionState.Closed)
                try { sqlConnection.Open(); }
                catch (Exception ex) { throw ex; }
            sqlCommand.CommandType = CommandType.Text;
            try
            {
                DataSet DS = new DataSet();
                sqlDataAdapter.Fill(DS, "User");
                if (DS.Tables[0].Rows[0][0].ToString() == "0")
                    return false;
                return true;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                sqlConnection.Close();
            }
        }
        #endregion


    }
}

